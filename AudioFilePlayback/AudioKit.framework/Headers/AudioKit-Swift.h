// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.1 clang-703.0.29)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import Accelerate;
@import CoreMIDI;
@import CoreGraphics;
@import AVFoundation;
#endif

#import <AudioKit/AudioKit.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class AVAudioNode;


/// Parent class for all nodes in AudioKit
SWIFT_CLASS("_TtC8AudioKit6AKNode")
@interface AKNode : NSObject

/// The internal AVAudioEngine AVAudioNode
@property (nonatomic, strong) AVAudioNode * _Nonnull avAudioNode;

/// Create the node
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Connect this node to another
- (void)addConnectionPoint:(AKNode * _Nonnull)node;
@end



/// Classic ADSR envelope
///
/// \param input Input node to process
///
/// \param attackDuration Attack time (Default: 0.1)
///
/// \param decayDuration Decay time (Default: 0.1)
///
/// \param sustainLevel Sustain Level (Default: 1.0)
///
/// \param releaseDuration Release time (Default: 0.1)
SWIFT_CLASS("_TtC8AudioKit19AKAmplitudeEnvelope")
@interface AKAmplitudeEnvelope : AKNode

/// Attack time
@property (nonatomic) double attackDuration;

/// Decay time
@property (nonatomic) double decayDuration;

/// Sustain Level
@property (nonatomic) double sustainLevel;

/// Release time
@property (nonatomic) double releaseDuration;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this envelope node
///
/// \param input Input node to process
///
/// \param attackDuration Attack time (Default: 0.1)
///
/// \param decayDuration Decay time (Default: 0.1)
///
/// \param sustainLevel Sustain Level (Default: 1.0)
///
/// \param releaseDuration Release time (Default: 0.1)
- (nonnull instancetype)init:(AKNode * _Nonnull)input attackDuration:(double)attackDuration decayDuration:(double)decayDuration sustainLevel:(double)sustainLevel releaseDuration:(double)releaseDuration OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// Performs a "root-mean-square" on a signal to get overall amplitude of a signal. The output signal looks similar to that of a classic VU meter.
///
/// \param input Input node to process
///
/// \param halfPowerPoint Half-power point (in Hz) of internal lowpass filter.
SWIFT_CLASS("_TtC8AudioKit18AKAmplitudeTracker")
@interface AKAmplitudeTracker : AKNode

/// Half-power point (in Hz) of internal lowpass filter.
@property (nonatomic) double halfPowerPoint;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Detected amplitude
@property (nonatomic, readonly) double amplitude;

/// Initialize this amplitude tracker node
///
/// \param input Input node to process
///
/// \param halfPowerPoint Half-power point (in Hz) of internal lowpass filter.
- (nonnull instancetype)init:(AKNode * _Nonnull)input halfPowerPoint:(double)halfPowerPoint OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// Simple audio playback class
SWIFT_CLASS("_TtC8AudioKit13AKAudioPlayer")
@interface AKAudioPlayer : AKNode

/// Boolean indicating whether or not to loop the playback
@property (nonatomic) BOOL looping;

/// Output Volume (Default 1)
@property (nonatomic) double volume;

/// Pan (Default Center = 0)
@property (nonatomic) double pan;

/// Whether or not the audio player is currently playing
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize the player
///
/// \param file Path to the audio file
- (nonnull instancetype)init:(NSString * _Nonnull)file OBJC_DESIGNATED_INITIALIZER;

/// Reload the file from the disk
- (void)reloadFile;

/// Start playback
- (void)start;

/// Pause playback
- (void)pause;

/// Stop playback
- (void)stop;

/// Current playback time (in seconds)
@property (nonatomic, readonly) double currentTime;

/// Replace the current audio file with a new audio file
- (void)replaceFile:(NSString * _Nonnull)newFile;
@end



/// An automatic wah effect, ported from Guitarix via Faust.
///
/// \param input Input node to process
///
/// \param wah Wah Amount
///
/// \param mix Dry/Wet Mix
///
/// \param amplitude Overall level
SWIFT_CLASS("_TtC8AudioKit9AKAutoWah")
@interface AKAutoWah : AKNode

/// Wah Amount
@property (nonatomic) double wah;

/// Dry/Wet Mix
@property (nonatomic) double mix;

/// Overall level
@property (nonatomic) double amplitude;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this Auto-Wah node
///
/// \param input Input node to process
///
/// \param wah Wah Amount
///
/// \param mix Dry/Wet Mix
///
/// \param amplitude Overall level
- (nonnull instancetype)init:(AKNode * _Nonnull)input wah:(double)wah mix:(double)mix amplitude:(double)amplitude OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// This operation outputs a version of the audio source, amplitude-modified so that its rms power is equal to that of the comparator audio source. Thus a signal that has suffered loss of power (eg., in passing through a filter bank) can be restored by matching it with, for instance, its own source. It should be noted that this modifies amplitude only; output signal is not altered in any other respect.
///
/// \param input Input node to process
///
/// \param comparator Audio to match power with
SWIFT_CLASS("_TtC8AudioKit10AKBalancer")
@interface AKBalancer : AKNode

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this balance node
///
/// \param input Input node to process
///
/// \param comparator Audio to match power with
- (nonnull instancetype)init:(AKNode * _Nonnull)input comparator:(AKNode * _Nonnull)comparator OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// These filters are Butterworth second-order IIR filters. They offer an almost flat passband and very good precision and stopband attenuation.
///
/// \param input Input node to process
///
/// \param centerFrequency Center frequency. (in Hertz)
///
/// \param bandwidth Bandwidth. (in Hertz)
SWIFT_CLASS("_TtC8AudioKit27AKBandPassButterworthFilter")
@interface AKBandPassButterworthFilter : AKNode

/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;

/// Center frequency. (in Hertz)
@property (nonatomic) double centerFrequency;

/// Bandwidth. (in Hertz)
@property (nonatomic) double bandwidth;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this filter node
///
/// \param input Input node to process
///
/// \param centerFrequency Center frequency. (in Hertz)
///
/// \param bandwidth Bandwidth. (in Hertz)
- (nonnull instancetype)init:(AKNode * _Nonnull)input centerFrequency:(double)centerFrequency bandwidth:(double)bandwidth OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// AudioKit version of Apple's BandPassFilter Audio Unit
///
/// \param input Input node to process
///
/// \param centerFrequency Center Frequency (Hz) ranges from 20 to 22050 (Default: 5000)
///
/// \param bandwidth Bandwidth (Cents) ranges from 100 to 12000 (Default: 600)
SWIFT_CLASS("_TtC8AudioKit16AKBandPassFilter")
@interface AKBandPassFilter : AKNode

/// Center Frequency (Hz) ranges from 20 to 22050 (Default: 5000)
@property (nonatomic) double centerFrequency;

/// Bandwidth (Cents) ranges from 100 to 12000 (Default: 600)
@property (nonatomic) double bandwidth;

/// Dry/Wet Mix (Default 100)
@property (nonatomic) double dryWetMix;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;

/// Initialize the band pass filter node
///
/// \param input Input node to process
///
/// \param centerFrequency Center Frequency (Hz) ranges from 20 to 22050 (Default: 5000)
///
/// \param bandwidth Bandwidth (Cents) ranges from 100 to 12000 (Default: 600)
- (nonnull instancetype)init:(AKNode * _Nonnull)input centerFrequency:(double)centerFrequency bandwidth:(double)bandwidth OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// These filters are Butterworth second-order IIR filters. They offer an almost flat passband and very good precision and stopband attenuation.
///
/// \param input Input node to process
///
/// \param centerFrequency Center frequency. (in Hertz)
///
/// \param bandwidth Bandwidth. (in Hertz)
SWIFT_CLASS("_TtC8AudioKit29AKBandRejectButterworthFilter")
@interface AKBandRejectButterworthFilter : AKNode

/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;

/// Center frequency. (in Hertz)
@property (nonatomic) double centerFrequency;

/// Bandwidth. (in Hertz)
@property (nonatomic) double bandwidth;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this filter node
///
/// \param input Input node to process
///
/// \param centerFrequency Center frequency. (in Hertz)
///
/// \param bandwidth Bandwidth. (in Hertz)
- (nonnull instancetype)init:(AKNode * _Nonnull)input centerFrequency:(double)centerFrequency bandwidth:(double)bandwidth OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// This will digitally degrade a signal.
///
/// \param input Input node to process
///
/// \param bitDepth The bit depth of signal output. Typically in range (1-24). Non-integer values are OK.
///
/// \param sampleRate The sample rate of signal output.
SWIFT_CLASS("_TtC8AudioKit12AKBitCrusher")
@interface AKBitCrusher : AKNode

/// The bit depth of signal output. Typically in range (1-24). Non-integer values are OK.
@property (nonatomic) double bitDepth;

/// The sample rate of signal output.
@property (nonatomic) double sampleRate;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this bitcrusher node
///
/// \param input Input node to process
///
/// \param bitDepth The bit depth of signal output. Typically in range (1-24). Non-integer values are OK.
///
/// \param sampleRate The sample rate of signal output.
- (nonnull instancetype)init:(AKNode * _Nonnull)input bitDepth:(double)bitDepth sampleRate:(double)sampleRate OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// AudioKit version of Apple's Mixer Node
SWIFT_CLASS("_TtC8AudioKit9AKBooster")
@interface AKBooster : AKNode

/// Amplification Factor
@property (nonatomic) double gain;

/// Tells whether or not the booster is actually changing the volume of its source.
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this amplification node
///
/// \param input AKNode whose output will be amplified
///
/// \param gain Amplification factor (Default: 1, Minimum: 0)
- (nonnull instancetype)init:(AKNode * _Nonnull)input gain:(double)gain OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// This is was built using the JC reverb implentation found in FAUST. According to the source code, the specifications for this implementation were found on an old SAIL DART backup tape. This class is derived from the CLM JCRev function, which is based on the use of networks of simple allpass and comb delay filters.  This class implements three series allpass units, followed by four parallel comb filters, and two decorrelation delay lines in parallel at the output.
///
/// \param input Input node to process
SWIFT_CLASS("_TtC8AudioKit16AKChowningReverb")
@interface AKChowningReverb : AKNode

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this reverb node
///
/// \param input Input node to process
- (nonnull instancetype)init:(AKNode * _Nonnull)input OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// Clips a signal to a predefined limit, in a "soft" manner, using the sine method.
///
/// \param input Input node to process
///
/// \param limit Threshold / limiting value.
SWIFT_CLASS("_TtC8AudioKit9AKClipper")
@interface AKClipper : AKNode

/// Threshold / limiting value.
@property (nonatomic) double limit;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this clipper node
///
/// \param input Input node to process
///
/// \param limit Threshold / limiting value.
- (nonnull instancetype)init:(AKNode * _Nonnull)input limit:(double)limit clippingStartPoint:(double)clippingStartPoint method:(NSInteger)method OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// This filter reiterates input with an echo density determined by loopDuration. The attenuation rate is independent and is determined by reverbDuration, the reverberation duration (defined as the time in seconds for a signal to decay to 1/1000, or 60dB down from its original amplitude). Output from a comb filter will appear only after loopDuration seconds.
///
/// \param input Input node to process
///
/// \param reverbDuration The time in seconds for a signal to decay to 1/1000, or 60dB from its original amplitude. (aka RT-60).
///
/// \param loopDuration The loop time of the filter, in seconds. This can also be thought of as the delay time. Determines frequency response curve, loopDuration * sr/2 peaks spaced evenly between 0 and sr/2.
SWIFT_CLASS("_TtC8AudioKit18AKCombFilterReverb")
@interface AKCombFilterReverb : AKNode

/// The time in seconds for a signal to decay to 1/1000, or 60dB from its original amplitude. (aka RT-60).
@property (nonatomic) double reverbDuration;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this filter node
///
/// \param input Input node to process
///
/// \param reverbDuration The time in seconds for a signal to decay to 1/1000, or 60dB from its original amplitude. (aka RT-60).
///
/// \param loopDuration The loop time of the filter, in seconds. This can also be thought of as the delay time. Determines frequency response curve, loopDuration * sr/2 peaks spaced evenly between 0 and sr/2.
- (nonnull instancetype)init:(AKNode * _Nonnull)input reverbDuration:(double)reverbDuration loopDuration:(double)loopDuration OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// AudioKit Compressor based on Apple's DynamicsProcessor Audio Unit
///
/// \param input Input node to process
///
/// \param threshold Threshold (dB) ranges from -40 to 20 (Default: -20)
///
/// \param headRoom Head Room (dB) ranges from 0.1 to 40.0 (Default: 5)
///
/// \param attackTime Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)
///
/// \param releaseTime Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)
///
/// \param masterGain Master Gain (dB) ranges from -40 to 40 (Default: 0)
///
/// \param compressionAmount Compression Amount (dB) ranges from -40 to 40 (Default: 0) (read only)
///
/// \param inputAmplitude Input Amplitude (dB) ranges from -40 to 40 (Default: 0) (read only)
///
/// \param outputAmplitude Output Amplitude (dB) ranges from -40 to 40 (Default: 0) (read only)
SWIFT_CLASS("_TtC8AudioKit12AKCompressor")
@interface AKCompressor : AKNode

/// Threshold (dB) ranges from -40 to 20 (Default: -20)
@property (nonatomic) double threshold;

/// Head Room (dB) ranges from 0.1 to 40.0 (Default: 5)
@property (nonatomic) double headRoom;

/// Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)
@property (nonatomic) double attackTime;

/// Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)
@property (nonatomic) double releaseTime;

/// Compression Amount (dB) read only
@property (nonatomic, readonly) double compressionAmount;

/// Input Amplitude (dB) read only
@property (nonatomic, readonly) double inputAmplitude;

/// Output Amplitude (dB) read only
@property (nonatomic, readonly) double outputAmplitude;

/// Master Gain (dB) ranges from -40 to 40 (Default: 0)
@property (nonatomic) double masterGain;

/// Dry/Wet Mix (Default 100)
@property (nonatomic) double dryWetMix;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;

/// Initialize the dynamics processor node
///
/// \param input Input node to process
///
/// \param threshold Threshold (dB) ranges from -40 to 20 (Default: -20)
///
/// \param headRoom Head Room (dB) ranges from 0.1 to 40.0 (Default: 5)
///
/// \param attackTime Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)
///
/// \param releaseTime Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)
///
/// \param masterGain Master Gain (dB) ranges from -40 to 40 (Default: 0)
///
/// \param compressionAmount Compression Amount (dB) ranges from -40 to 40 (read only)
///
/// \param inputAmplitude Input Amplitude (dB) ranges from -40 to 40 (read only)
///
/// \param outputAmplitude Output Amplitude (dB) ranges from -40 to 40 (read only)
- (nonnull instancetype)init:(AKNode * _Nonnull)input threshold:(double)threshold headRoom:(double)headRoom attackTime:(double)attackTime releaseTime:(double)releaseTime masterGain:(double)masterGain OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end

@class NSURL;


/// This module will perform partitioned convolution on an input signal using an audio file as an impulse response.
///
/// \param input Input node to process
///
/// \param impulseResponseFileURL Location of the imulseResponse audio File
///
/// \param partitionLength Partition length (in samples). Must be a power of 2. Lower values will add less latency, at the cost of requiring more CPU power.
SWIFT_CLASS("_TtC8AudioKit13AKConvolution")
@interface AKConvolution : AKNode

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this convolution node
///
/// \param input Input node to process
///
/// \param impulseResponseFileURL Location of the imulseResponse audio File
///
/// \param partitionLength Partition length (in samples). Must be a power of 2. Lower values will add less latency, at the cost of requiring more CPU power.
- (nonnull instancetype)init:(AKNode * _Nonnull)input impulseResponseFileURL:(NSURL * _Nonnull)impulseResponseFileURL partitionLength:(NSInteger)partitionLength OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// 8 delay line stereo FDN reverb, with feedback matrix based upon physical modeling scattering junction of 8 lossless waveguides of equal characteristic impedance.
///
/// \param input Input node to process
///
/// \param feedback Feedback level in the range 0 to 1. 0.6 gives a good small 'live' room sound, 0.8 a small hall, and 0.9 a large hall. A setting of exactly 1 means infinite length, while higher values will make the opcode unstable.
///
/// \param cutoffFrequency Low-pass cutoff frequency.
SWIFT_CLASS("_TtC8AudioKit16AKCostelloReverb")
@interface AKCostelloReverb : AKNode

/// Feedback level in the range 0 to 1. 0.6 gives a good small 'live' room sound, 0.8 a small hall, and 0.9 a large hall. A setting of exactly 1 means infinite length, while higher values will make the opcode unstable.
@property (nonatomic) double feedback;

/// Low-pass cutoff frequency.
@property (nonatomic) double cutoffFrequency;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this reverb node
///
/// \param input Input node to process
///
/// \param feedback Feedback level in the range 0 to 1. 0.6 gives a good small 'live' room sound, 0.8 a small hall, and 0.9 a large hall. A setting of exactly 1 means infinite length, while higher values will make the opcode unstable.
///
/// \param cutoffFrequency Low-pass cutoff frequency.
- (nonnull instancetype)init:(AKNode * _Nonnull)input feedback:(double)feedback cutoffFrequency:(double)cutoffFrequency OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// Implements the DC blocking filter Y[i] = X[i] - X[i-1] + (igain * Y[i-1]) Based on work by Perry Cook.
///
/// \param input Input node to process
SWIFT_CLASS("_TtC8AudioKit9AKDCBlock")
@interface AKDCBlock : AKNode

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this filter node
///
/// \param input Input node to process
- (nonnull instancetype)init:(AKNode * _Nonnull)input OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// AudioKit version of Apple's Decimator from the Distortion Audio Unit
///
/// \param input Input node to process
///
/// \param decimation Decimation (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param rounding Rounding (Normalized Value) ranges from 0 to 1 (Default: 0)
///
/// \param mix Mix (Normalized Value) ranges from 0 to 1 (Default: 1)
SWIFT_CLASS("_TtC8AudioKit11AKDecimator")
@interface AKDecimator : AKNode

/// Decimation (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double decimation;

/// Rounding (Normalized Value) ranges from 0 to 1 (Default: 0)
@property (nonatomic) double rounding;

/// Mix (Normalized Value) ranges from 0 to 1 (Default: 1)
@property (nonatomic) double mix;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;

/// Initialize the decimator node
///
/// \param input Input node to process
///
/// \param decimation Decimation (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param rounding Rounding (Normalized Value) ranges from 0 to 1 (Default: 0)
///
/// \param mix Mix (Normalized Value) ranges from 0 to 1 (Default: 1)
- (nonnull instancetype)init:(AKNode * _Nonnull)input decimation:(double)decimation rounding:(double)rounding mix:(double)mix OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// AudioKit version of Apple's Delay Audio Unit
///
/// \param input Input audio AKNode to process
///
/// \param time Delay time in seconds, ranges from 0 to 2 (Default: 1)
///
/// \param feedback Amount of feedback (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param lowPassCutoff Low-pass cutoff frequency in Hz (Default 15000)
///
/// \param dryWetMix Amount of unprocessed (dry) to delayed (wet) audio (Normalized Value) ranges from 0 to 1 (Default: 0.5)
SWIFT_CLASS("_TtC8AudioKit7AKDelay")
@interface AKDelay : AKNode

/// Delay time in seconds (Default: 1)
@property (nonatomic) NSTimeInterval time;

/// Feedback (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double feedback;

/// Low pass cut-off frequency in Hertz (Default: 15000)
@property (nonatomic) double lowPassCutoff;

/// Dry/Wet Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double dryWetMix;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;

/// Initialize the delay node
///
/// \param input Input audio AKNode to process
///
/// \param time Delay time in seconds (Default: 1)
///
/// \param feedback Amount of feedback (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param lowPassCutoff Low-pass cutoff frequency in Hz (Default 15000)
///
/// \param dryWetMix Amount of unprocessed (dry) to delayed (wet) audio (Normalized Value) ranges from 0 to 1 (Default: 0.5)
- (nonnull instancetype)init:(AKNode * _Nonnull)input time:(double)time feedback:(double)feedback lowPassCutoff:(double)lowPassCutoff dryWetMix:(double)dryWetMix OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// Wrapper for audio device selection
SWIFT_CLASS("_TtC8AudioKit8AKDevice")
@interface AKDevice : NSObject

/// The human-readable name for the device.
@property (nonatomic, copy) NSString * _Nonnull name;

/// The device identifier.
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceID;

/// Initialize the device
///
/// \param name The human-readable name for the device.
///
/// \param deviceID The device identifier.
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name deviceID:(NSString * _Nonnull)deviceID OBJC_DESIGNATED_INITIALIZER;

/// Printable device description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



/// AudioKit version of Apple's Distortion Audio Unit
///
/// \param input Input node to process
///
/// \param delay Delay (Milliseconds) ranges from 0.1 to 500 (Default: 0.1)
///
/// \param decay Decay (Rate) ranges from 0.1 to 50 (Default: 1.0)
///
/// \param delayMix Delay Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param decimation Decimation (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param rounding Rounding (Normalized Value) ranges from 0 to 1 (Default: 0.0)
///
/// \param decimationMix Decimation Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param linearTerm Linear Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param squaredTerm Squared Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param cubicTerm Cubic Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param polynomialMix Polynomial Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param ringModFreq1 Ring Mod Freq1 (Hertz) ranges from 0.5 to 8000 (Default: 100)
///
/// \param ringModFreq2 Ring Mod Freq2 (Hertz) ranges from 0.5 to 8000 (Default: 100)
///
/// \param ringModBalance Ring Mod Balance (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param ringModMix Ring Mod Mix (Normalized Value) ranges from 0 to 1 (Default: 0.0)
///
/// \param softClipGain Soft Clip Gain (dB) ranges from -80 to 20 (Default: -6)
///
/// \param finalMix Final Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
SWIFT_CLASS("_TtC8AudioKit12AKDistortion")
@interface AKDistortion : AKNode

/// Delay (Milliseconds) ranges from 0.1 to 500 (Default: 0.1)
@property (nonatomic) double delay;

/// Decay (Rate) ranges from 0.1 to 50 (Default: 1.0)
@property (nonatomic) double decay;

/// Delay Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double delayMix;

/// Decimation (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double decimation;

/// Rounding (Normalized Value) ranges from 0 to 1 (Default: 0.0)
@property (nonatomic) double rounding;

/// Decimation Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double decimationMix;

/// Linear Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double linearTerm;

/// Squared Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double squaredTerm;

/// Cubic Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double cubicTerm;

/// Polynomial Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double polynomialMix;

/// Ring Mod Freq1 (Hertz) ranges from 0.5 to 8000 (Default: 100)
@property (nonatomic) double ringModFreq1;

/// Ring Mod Freq2 (Hertz) ranges from 0.5 to 8000 (Default: 100)
@property (nonatomic) double ringModFreq2;

/// Ring Mod Balance (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double ringModBalance;

/// Ring Mod Mix (Normalized Value) ranges from 0 to 1 (Default: 0.0)
@property (nonatomic) double ringModMix;

/// Soft Clip Gain (dB) ranges from -80 to 20 (Default: -6)
@property (nonatomic) double softClipGain;

/// Final Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double finalMix;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;

/// Initialize the distortion node
///
/// \param input Input node to process
///
/// \param delay Delay (Milliseconds) ranges from 0.1 to 500 (Default: 0.1)
///
/// \param decay Decay (Rate) ranges from 0.1 to 50 (Default: 1.0)
///
/// \param delayMix Delay Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param decimation Decimation (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param rounding Rounding (Normalized Value) ranges from 0 to 1 (Default: 0.0)
///
/// \param decimationMix Decimation Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param linearTerm Linear Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param squaredTerm Squared Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param cubicTerm Cubic Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param polynomialMix Polynomial Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param ringModFreq1 Ring Mod Freq1 (Hertz) ranges from 0.5 to 8000 (Default: 100)
///
/// \param ringModFreq2 Ring Mod Freq2 (Hertz) ranges from 0.5 to 8000 (Default: 100)
///
/// \param ringModBalance Ring Mod Balance (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param ringModMix Ring Mod Mix (Normalized Value) ranges from 0 to 1 (Default: 0.0)
///
/// \param softClipGain Soft Clip Gain (dB) ranges from -80 to 20 (Default: -6)
///
/// \param finalMix Final Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
- (nonnull instancetype)init:(AKNode * _Nonnull)input delay:(double)delay decay:(double)decay delayMix:(double)delayMix decimation:(double)decimation rounding:(double)rounding decimationMix:(double)decimationMix linearTerm:(double)linearTerm squaredTerm:(double)squaredTerm cubicTerm:(double)cubicTerm polynomialMix:(double)polynomialMix ringModFreq1:(double)ringModFreq1 ringModFreq2:(double)ringModFreq2 ringModBalance:(double)ringModBalance ringModMix:(double)ringModMix softClipGain:(double)softClipGain finalMix:(double)finalMix OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// Physical model of the sound of dripping water. When triggered, it will produce a droplet of water.
///
/// \param intensity The intensity of the dripping sound.
///
/// \param dampingFactor The damping factor. Maximum value is 2.0.
///
/// \param energyReturn The amount of energy to add back into the system.
///
/// \param mainResonantFrequency Main resonant frequency.
///
/// \param firstResonantFrequency The first resonant frequency.
///
/// \param secondResonantFrequency The second resonant frequency.
///
/// \param amplitude Amplitude.
SWIFT_CLASS("_TtC8AudioKit6AKDrip")
@interface AKDrip : AKNode

/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;

/// The intensity of the dripping sound.
@property (nonatomic) double intensity;

/// The damping factor. Maximum value is 2.0.
@property (nonatomic) double dampingFactor;

/// The amount of energy to add back into the system.
@property (nonatomic) double energyReturn;

/// Main resonant frequency.
@property (nonatomic) double mainResonantFrequency;

/// The first resonant frequency.
@property (nonatomic) double firstResonantFrequency;

/// The second resonant frequency.
@property (nonatomic) double secondResonantFrequency;

/// Amplitude.
@property (nonatomic) double amplitude;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this drip node
///
/// \param intensity The intensity of the dripping sound.
///
/// \param dampingFactor The damping factor. Maximum value is 2.0.
///
/// \param energyReturn The amount of energy to add back into the system.
///
/// \param mainResonantFrequency Main resonant frequency.
///
/// \param firstResonantFrequency The first resonant frequency.
///
/// \param secondResonantFrequency The second resonant frequency.
///
/// \param amplitude Amplitude.
- (nonnull instancetype)initWithIntensity:(double)intensity dampingFactor:(double)dampingFactor energyReturn:(double)energyReturn mainResonantFrequency:(double)mainResonantFrequency firstResonantFrequency:(double)firstResonantFrequency secondResonantFrequency:(double)secondResonantFrequency amplitude:(double)amplitude OBJC_DESIGNATED_INITIALIZER;

/// Trigger the sound with an optional set of parameters
- (void)trigger;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// Balanceable Mix between two signals, usually used for a dry signal and wet signal
///
/// \param dry Dry Input (or just input 1)
///
/// \param wet Wet Input (or just input 2)
///
/// \param balance Balance Point (0 = all dry, 1 = all wet)
SWIFT_CLASS("_TtC8AudioKit13AKDryWetMixer")
@interface AKDryWetMixer : AKNode

/// Balance (Default 0.5)
@property (nonatomic) double balance;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;

/// Initialize this dry wet mixer node
///
/// \param dry Dry Input (or just input 1)
///
/// \param wet Wet Input (or just input 2)
///
/// \param balance Balance Point (0 = all dry, 1 = all wet)
- (nonnull instancetype)init:(AKNode * _Nonnull)dry :(AKNode * _Nonnull)wet balance:(double)balance OBJC_DESIGNATED_INITIALIZER;
@end



/// AudioKit version of Apple's DynamicsProcessor Audio Unit
///
/// \param input Input node to process
///
/// \param threshold Threshold (dB) ranges from -40 to 20 (Default: -20)
///
/// \param headRoom Head Room (dB) ranges from 0.1 to 40.0 (Default: 5)
///
/// \param expansionRatio Expansion Ratio (rate) ranges from 1 to 50.0 (Default: 2)
///
/// \param expansionThreshold Expansion Threshold (rate) ranges from 1 to 50.0 (Default: 2)
///
/// \param attackTime Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)
///
/// \param releaseTime Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)
///
/// \param masterGain Master Gain (dB) ranges from -40 to 40 (Default: 0)
///
/// \param compressionAmount Compression Amount (dB) ranges from -40 to 40 (Default: 0) (read only)
///
/// \param inputAmplitude Input Amplitude (dB) ranges from -40 to 40 (Default: 0) (read only)
///
/// \param outputAmplitude Output Amplitude (dB) ranges from -40 to 40 (Default: 0) (read only)
SWIFT_CLASS("_TtC8AudioKit19AKDynamicsProcessor")
@interface AKDynamicsProcessor : AKNode

/// Threshold (dB) ranges from -40 to 20 (Default: -20)
@property (nonatomic) double threshold;

/// Head Room (dB) ranges from 0.1 to 40.0 (Default: 5)
@property (nonatomic) double headRoom;

/// Expansion Ratio (rate) ranges from 1 to 50.0 (Default: 2)
@property (nonatomic) double expansionRatio;

/// Expansion Threshold (rate) ranges from 1 to 50.0 (Default: 2)
@property (nonatomic) double expansionThreshold;

/// Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)
@property (nonatomic) double attackTime;

/// Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)
@property (nonatomic) double releaseTime;

/// Master Gain (dB) ranges from -40 to 40 (Default: 0)
@property (nonatomic) double masterGain;

/// Compression Amount (dB) read only
@property (nonatomic, readonly) double compressionAmount;

/// Input Amplitude (dB) read only
@property (nonatomic, readonly) double inputAmplitude;

/// Output Amplitude (dB) read only
@property (nonatomic, readonly) double outputAmplitude;

/// Dry/Wet Mix (Default 100)
@property (nonatomic) double dryWetMix;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;

/// Initialize the dynamics processor node
///
/// \param input Input node to process
///
/// \param threshold Threshold (dB) ranges from -40 to 20 (Default: -20)
///
/// \param headRoom Head Room (dB) ranges from 0.1 to 40.0 (Default: 5)
///
/// \param expansionRatio Expansion Ratio (rate) ranges from 1 to 50.0 (Default: 2)
///
/// \param expansionThreshold Expansion Threshold (rate) ranges from 1 to 50.0 (Default: 2)
///
/// \param attackTime Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)
///
/// \param releaseTime Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)
///
/// \param masterGain Master Gain (dB) ranges from -40 to 40 (Default: 0)
///
/// \param compressionAmount Compression Amount (dB) ranges from -40 to 40 (Default: 0)
///
/// \param inputAmplitude Input Amplitude (dB) ranges from -40 to 40 (Default: 0)
///
/// \param outputAmplitude Output Amplitude (dB) ranges from -40 to 40 (Default: 0)
- (nonnull instancetype)init:(AKNode * _Nonnull)input threshold:(double)threshold headRoom:(double)headRoom expansionRatio:(double)expansionRatio expansionThreshold:(double)expansionThreshold attackTime:(double)attackTime releaseTime:(double)releaseTime masterGain:(double)masterGain compressionAmount:(double)compressionAmount inputAmplitude:(double)inputAmplitude outputAmplitude:(double)outputAmplitude OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// A 2nd order tunable equalization filter that provides a peak/notch filter for building parametric/graphic equalizers. With gain above 1, there will be a peak at the center frequency with a width dependent on bandwidth. If gain is less than 1, a notch is formed around the center frequency.
///
/// \param input Input node to process
///
/// \param centerFrequency Center frequency. (in Hertz)
///
/// \param bandwidth The peak/notch bandwidth in Hertz
///
/// \param gain The peak/notch gain
SWIFT_CLASS("_TtC8AudioKit17AKEqualizerFilter")
@interface AKEqualizerFilter : AKNode

/// Center frequency. (in Hertz)
@property (nonatomic) double centerFrequency;

/// The peak/notch bandwidth in Hertz
@property (nonatomic) double bandwidth;

/// The peak/notch gain
@property (nonatomic) double gain;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this filter node
///
/// \param input Input node to process
///
/// \param centerFrequency Center frequency. (in Hertz)
///
/// \param bandwidth The peak/notch bandwidth in Hertz
///
/// \param gain The peak/notch gain
- (nonnull instancetype)init:(AKNode * _Nonnull)input centerFrequency:(double)centerFrequency bandwidth:(double)bandwidth gain:(double)gain OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// AudioKit Expander based on Apple's DynamicsProcessor Audio Unit
///
/// \param input Input node to process
///
/// \param expansionRatio Expansion Ratio (rate) ranges from 1 to 50.0 (Default: 2)
///
/// \param expansionThreshold Expansion Threshold (rate) ranges from 1 to 50.0 (Default: 2)
///
/// \param attackTime Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)
///
/// \param releaseTime Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)
///
/// \param masterGain Master Gain (dB) ranges from -40 to 40 (Default: 0)
///
/// \param compressionAmount Compression Amount (dB) ranges from -40 to 40 (Default: 0) (read only)
///
/// \param inputAmplitude Input Amplitude (dB) ranges from -40 to 40 (Default: 0) (read only)
///
/// \param outputAmplitude Output Amplitude (dB) ranges from -40 to 40 (Default: 0) (read only)
SWIFT_CLASS("_TtC8AudioKit10AKExpander")
@interface AKExpander : AKNode

/// Expansion Ratio (rate) ranges from 1 to 50.0 (Default: 2)
@property (nonatomic) double expansionRatio;

/// Expansion Threshold (rate) ranges from 1 to 50.0 (Default: 2)
@property (nonatomic) double expansionThreshold;

/// Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)
@property (nonatomic) double attackTime;

/// Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)
@property (nonatomic) double releaseTime;

/// Master Gain (dB) ranges from -40 to 40 (Default: 0)
@property (nonatomic) double masterGain;

/// Compression Amount (dB) read only
@property (nonatomic, readonly) double compressionAmount;

/// Input Amplitude (dB) read only
@property (nonatomic, readonly) double inputAmplitude;

/// Output Amplitude (dB) read only
@property (nonatomic, readonly) double outputAmplitude;

/// Dry/Wet Mix (Default 100)
@property (nonatomic) double dryWetMix;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;

/// Initialize the dynamics processor node
///
/// \param input Input node to process
///
/// \param expansionRatio Expansion Ratio (rate) ranges from 1 to 50.0 (Default: 2)
///
/// \param expansionThreshold Expansion Threshold (rate) ranges from 1 to 50.0 (Default: 2)
///
/// \param attackTime Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)
///
/// \param releaseTime Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)
///
/// \param masterGain Master Gain (dB) ranges from -40 to 40 (Default: 0)
///
/// \param compressionAmount Compression Amount (dB) ranges from -40 to 40 (read only)
///
/// \param inputAmplitude Input Amplitude (dB) ranges from -40 to 40 (read only)
///
/// \param outputAmplitude Output Amplitude (dB) ranges from -40 to 40 (read only)
- (nonnull instancetype)init:(AKNode * _Nonnull)input threshold:(double)threshold headRoom:(double)headRoom expansionRatio:(double)expansionRatio expansionThreshold:(double)expansionThreshold attackTime:(double)attackTime releaseTime:(double)releaseTime masterGain:(double)masterGain compressionAmount:(double)compressionAmount inputAmplitude:(double)inputAmplitude outputAmplitude:(double)outputAmplitude OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end

@class EZAudioFFT;


/// FFT Calculation for any node
SWIFT_CLASS("_TtC8AudioKit5AKFFT")
@interface AKFFT : NSObject <EZAudioFFTDelegate>

/// Array of FFT data
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull fftData;

/// Initialze the FFT calculation on a given node
///
/// \param input Node on whose output the FFT will be computed
- (nonnull instancetype)init:(AKNode * _Nonnull)input OBJC_DESIGNATED_INITIALIZER;

/// Callback function for FFT computation
- (void)fft:(EZAudioFFT * _Null_unspecified)fft updatedWithFFTData:(float * _Null_unspecified)fftData bufferSize:(vDSP_Length)bufferSize;
@end



/// Parent class for nodes that can be included in a polyphonic instrument
SWIFT_CLASS("_TtC8AudioKit7AKVoice")
@interface AKVoice : AKNode

/// Required for the AKToggleable protocol
@property (nonatomic, readonly) BOOL isStarted;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;

/// Return a duplication of this voice
- (AKVoice * _Nonnull)duplicate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Classic FM Synthesis audio generation.
///
/// \param baseFrequency In cycles per second, or Hz, this is the common denominator for the carrier and modulating frequencies.
///
/// \param carrierMultiplier This multiplied by the baseFrequency gives the carrier frequency.
///
/// \param modulatingMultiplier This multiplied by the baseFrequency gives the modulating frequency.
///
/// \param modulationIndex This multiplied by the modulating frequency gives the modulation amplitude.
///
/// \param amplitude Output Amplitude.
SWIFT_CLASS("_TtC8AudioKit14AKFMOscillator")
@interface AKFMOscillator : AKVoice

/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;

/// In cycles per second, or Hz, this is the common denominator for the carrier and modulating frequencies.
@property (nonatomic) double baseFrequency;

/// This multiplied by the baseFrequency gives the carrier frequency.
@property (nonatomic) double carrierMultiplier;

/// This multiplied by the baseFrequency gives the modulating frequency.
@property (nonatomic) double modulatingMultiplier;

/// This multiplied by the modulating frequency gives the modulation amplitude.
@property (nonatomic) double modulationIndex;

/// Output Amplitude.
@property (nonatomic) double amplitude;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize the oscillator with defaults
- (nonnull instancetype)init;

/// Function create an identical new node for use in creating polyphonic instruments
- (AKVoice * _Nonnull)duplicate;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


@interface AKFMOscillator (SWIFT_EXTENSION(AudioKit))

/// Stun Ray Preset
- (void)presetStunRay;

/// Fog Horn Preset
- (void)presetFogHorn;

/// Buzzer Preset
- (void)presetBuzzer;

/// Spiral Preset
- (void)presetSpiral;

/// Wobble Preset
- (void)presetWobble;
@end



/// This class is for generator nodes that consist of a number of voices that can be played simultaneously for polyphony
SWIFT_CLASS("_TtC8AudioKit22AKPolyphonicInstrument")
@interface AKPolyphonicInstrument : AKNode

/// Array of all voices
@property (nonatomic, readonly, copy) NSArray<AKVoice *> * _Nonnull voices;

/// Array of available voices
@property (nonatomic, copy) NSArray<AKVoice *> * _Nonnull availableVoices;

/// Array of only voices currently playing
@property (nonatomic, copy) NSArray<AKVoice *> * _Nonnull activeVoices;

/// Array of notes being played on the active instruments
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull activeNotes;

/// Output level
@property (nonatomic) double volume;

/// Alias for volume
@property (nonatomic) double amplitude;

/// Initialize the polyphonic instrument with a voice and a count
///
/// \param voice Template voice which will be copied
///
/// \param voiceCount Maximum number of simultaneous voices
- (nonnull instancetype)initWithVoice:(AKVoice * _Nonnull)voice voiceCount:(NSInteger)voiceCount OBJC_DESIGNATED_INITIALIZER;

/// Start playback with MIDI style note and velocity
///
/// \param note MIDI Note Number
///
/// \param velocity MIDI Velocity (0-127)
- (void)playNote:(NSInteger)note velocity:(NSInteger)velocity;

/// Stop playback of a particular note
///
/// \param note MIDI Note Number
- (void)stopNote:(NSInteger)note;

/// Start playback of a particular voice with MIDI style note and velocity
///
/// \param voice Voice to start
///
/// \param note MIDI Note Number
///
/// \param velocity MIDI Velocity (0-127)
- (void)playVoice:(AKVoice * _Nonnull)voice note:(NSInteger)note velocity:(NSInteger)velocity;

/// Stop playback of a particular voice
///
/// \param voice Voice to stop
///
/// \param note MIDI Note Number
- (void)stopVoice:(AKVoice * _Nonnull)voice note:(NSInteger)note;

/// Stop all voices
- (void)panic;
@end



/// A wrapper for AKFMOscillator to make it playable as a polyphonic instrument.
SWIFT_CLASS("_TtC8AudioKit9AKFMSynth")
@interface AKFMSynth : AKPolyphonicInstrument

/// This multiplied by the baseFrequency gives the carrier frequency.
@property (nonatomic) double carrierMultiplier;

/// This multiplied by the baseFrequency gives the modulating frequency.
@property (nonatomic) double modulatingMultiplier;

/// This multiplied by the modulating frequency gives the modulation amplitude.
@property (nonatomic) double modulationIndex;

/// Attack time
@property (nonatomic) double attackDuration;

/// Decay time
@property (nonatomic) double decayDuration;

/// Sustain Level
@property (nonatomic) double sustainLevel;

/// Release time
@property (nonatomic) double releaseDuration;

/// Instantiate the FM Oscillator Instrument
///
/// \param voiceCount Maximum number of voices that will be required
- (nonnull instancetype)initWithVoiceCount:(NSInteger)voiceCount OBJC_DESIGNATED_INITIALIZER;

/// Start a given voice playing a note.
///
/// \param voice Voice to start
///
/// \param note MIDI Note Number to start
///
/// \param velocity MIDI Velocity (0-127) to trigger the note at
- (void)playVoice:(AKVoice * _Nonnull)voice note:(NSInteger)note velocity:(NSInteger)velocity;

/// Stop a given voice playing a note.
///
/// \param voice Voice to stop
///
/// \param note MIDI Note Number to stop
- (void)stopVoice:(AKVoice * _Nonnull)voice note:(NSInteger)note;
@end



/// This filter reiterates the input with an echo density determined by loop time. The attenuation rate is independent and is determined by the reverberation time (defined as the time in seconds for a signal to decay to 1/1000, or 60dB down from its original amplitude).  Output will begin to appear immediately.
///
/// \param input Input node to process
///
/// \param reverbDuration The duration in seconds for a signal to decay to 1/1000, or 60dB down from its original amplitude.
///
/// \param loopDuration The loop duration of the filter, in seconds. This can also be thought of as the delay time or “echo density” of the reverberation.
SWIFT_CLASS("_TtC8AudioKit29AKFlatFrequencyResponseReverb")
@interface AKFlatFrequencyResponseReverb : AKNode

/// The duration in seconds for a signal to decay to 1/1000, or 60dB down from its original amplitude.
@property (nonatomic) double reverbDuration;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this reverb node
///
/// \param input Input node to process
///
/// \param reverbDuration The duration in seconds for a signal to decay to 1/1000, or 60dB down from its original amplitude.
///
/// \param loopDuration The loop duration of the filter, in seconds. This can also be thought of as the delay time or “echo density” of the reverberation.
- (nonnull instancetype)init:(AKNode * _Nonnull)input reverbDuration:(double)reverbDuration loopDuration:(double)loopDuration OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// When fed with a pulse train, it will generate a series of overlapping grains. Overlapping will occur when 1/freq < dec, but there is no upper limit on the number of overlaps.
///
/// \param input Input node to process
///
/// \param centerFrequency Center frequency.
///
/// \param attackDuration Impulse response attack time (in seconds).
///
/// \param decayDuration Impulse reponse decay time (in seconds)
SWIFT_CLASS("_TtC8AudioKit15AKFormantFilter")
@interface AKFormantFilter : AKNode

/// Center frequency.
@property (nonatomic) double centerFrequency;

/// Impulse response attack time (in seconds).
@property (nonatomic) double attackDuration;

/// Impulse reponse decay time (in seconds)
@property (nonatomic) double decayDuration;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this filter node
///
/// \param input Input node to process
///
/// \param centerFrequency Center frequency.
///
/// \param attackDuration Impulse response attack time (in seconds).
///
/// \param decayDuration Impulse reponse decay time (in seconds)
- (nonnull instancetype)init:(AKNode * _Nonnull)input centerFrequency:(double)centerFrequency attackDuration:(double)attackDuration decayDuration:(double)decayDuration OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// This tracks the pitch of signal using the AMDF (Average Magnitude Difference Function) method of pitch following.
SWIFT_CLASS("_TtC8AudioKit18AKFrequencyTracker")
@interface AKFrequencyTracker : AKNode

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Detected Amplitude (Use AKAmplitude tracker if you don't need frequency)
@property (nonatomic, readonly) double amplitude;

/// Detected frequency
@property (nonatomic, readonly) double frequency;

/// Initialize this Pitch-detection node
///
/// \param input Input node to process
///
/// \param minimumFrequency Lower bound of frequency detection
///
/// \param maximumFrequency Upper bound of frequency detection
- (nonnull instancetype)init:(AKNode * _Nonnull)input minimumFrequency:(double)minimumFrequency maximumFrequency:(double)maximumFrequency OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// These filters are Butterworth second-order IIR filters. They offer an almost flat passband and very good precision and stopband attenuation.
///
/// \param input Input node to process
///
/// \param cutoffFrequency Cutoff frequency. (in Hertz)
SWIFT_CLASS("_TtC8AudioKit27AKHighPassButterworthFilter")
@interface AKHighPassButterworthFilter : AKNode

/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;

/// Cutoff frequency. (in Hertz)
@property (nonatomic) double cutoffFrequency;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this filter node
///
/// \param input Input node to process
///
/// \param cutoffFrequency Cutoff frequency. (in Hertz)
- (nonnull instancetype)init:(AKNode * _Nonnull)input cutoffFrequency:(double)cutoffFrequency OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// AudioKit version of Apple's HighPassFilter Audio Unit
///
/// \param input Input node to process
///
/// \param cutoffFrequency Cutoff Frequency (Hz) ranges from 10 to 22050 (Default: 6900)
///
/// \param resonance Resonance (dB) ranges from -20 to 40 (Default: 0)
SWIFT_CLASS("_TtC8AudioKit16AKHighPassFilter")
@interface AKHighPassFilter : AKNode

/// Cutoff Frequency (Hz) ranges from 10 to 22050 (Default: 6900)
@property (nonatomic) double cutoffFrequency;

/// Resonance (dB) ranges from -20 to 40 (Default: 0)
@property (nonatomic) double resonance;

/// Dry/Wet Mix (Default 100)
@property (nonatomic) double dryWetMix;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;

/// Initialize the high pass filter node
///
/// \param input Input node to process
///
/// \param cutoffFrequency Cutoff Frequency (Hz) ranges from 10 to 22050 (Default: 6900)
///
/// \param resonance Resonance (dB) ranges from -20 to 40 (Default: 0)
- (nonnull instancetype)init:(AKNode * _Nonnull)input cutoffFrequency:(double)cutoffFrequency resonance:(double)resonance OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// AudioKit version of Apple's HighShelfFilter Audio Unit
///
/// \param input Input node to process
///
/// \param cutOffFrequency Cut Off Frequency (Hz) ranges from 10000 to 22050 (Default: 10000)
///
/// \param gain Gain (dB) ranges from -40 to 40 (Default: 0)
SWIFT_CLASS("_TtC8AudioKit17AKHighShelfFilter")
@interface AKHighShelfFilter : AKNode

/// Cut Off Frequency (Hz) ranges from 10000 to 22050 (Default: 10000)
@property (nonatomic) double cutOffFrequency;

/// Gain (dB) ranges from -40 to 40 (Default: 0)
@property (nonatomic) double gain;

/// Dry/Wet Mix (Default 100)
@property (nonatomic) double dryWetMix;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;

/// Initialize the high shelf filter node
///
/// \param input Input node to process
///
/// \param cutOffFrequency Cut Off Frequency (Hz) ranges from 10000 to 22050 (Default: 10000)
///
/// \param gain Gain (dB) ranges from -40 to 40 (Default: 0)
- (nonnull instancetype)init:(AKNode * _Nonnull)input cutOffFrequency:(double)cutOffFrequency gain:(double)gain OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// This is an implementation of Zoelzer's parametric equalizer filter.
///
/// \param input Input node to process
///
/// \param centerFrequency Corner frequency.
///
/// \param gain Amount at which the corner frequency value shall be increased or decreased. A value of 1 is a flat response.
///
/// \param q Q of the filter. sqrt(0.5) is no resonance.
SWIFT_CLASS("_TtC8AudioKit36AKHighShelfParametricEqualizerFilter")
@interface AKHighShelfParametricEqualizerFilter : AKNode

/// Corner frequency.
@property (nonatomic) double centerFrequency;

/// Amount at which the corner frequency value shall be increased or decreased. A value of 1 is a flat response.
@property (nonatomic) double gain;

/// Q of the filter. sqrt(0.5) is no resonance.
@property (nonatomic) double q;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this equalizer node
///
/// \param input Input node to process
///
/// \param centerFrequency Corner frequency.
///
/// \param gain Amount at which the corner frequency value shall be increased or decreased. A value of 1 is a flat response.
///
/// \param q Q of the filter. sqrt(0.5) is no resonance.
- (nonnull instancetype)init:(AKNode * _Nonnull)input centerFrequency:(double)centerFrequency gain:(double)gain q:(double)q OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// These filters are Butterworth second-order IIR filters. They offer an almost flat passband and very good precision and stopband attenuation.
///
/// \param input Input node to process
///
/// \param cutoffFrequency Cutoff frequency. (in Hertz)
SWIFT_CLASS("_TtC8AudioKit26AKLowPassButterworthFilter")
@interface AKLowPassButterworthFilter : AKNode

/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;

/// Cutoff frequency. (in Hertz)
@property (nonatomic) double cutoffFrequency;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this filter node
///
/// \param input Input node to process
///
/// \param cutoffFrequency Cutoff frequency. (in Hertz)
- (nonnull instancetype)init:(AKNode * _Nonnull)input cutoffFrequency:(double)cutoffFrequency OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// AudioKit version of Apple's LowPassFilter Audio Unit
///
/// \param input Input node to process
///
/// \param cutoffFrequency Cutoff Frequency (Hz) ranges from 10 to 22050 (Default: 6900)
///
/// \param resonance Resonance (dB) ranges from -20 to 40 (Default: 0)
SWIFT_CLASS("_TtC8AudioKit15AKLowPassFilter")
@interface AKLowPassFilter : AKNode

/// Cutoff Frequency (Hz) ranges from 10 to 22050 (Default: 6900)
@property (nonatomic) double cutoffFrequency;

/// Resonance (dB) ranges from -20 to 40 (Default: 0)
@property (nonatomic) double resonance;

/// Dry/Wet Mix (Default 100)
@property (nonatomic) double dryWetMix;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;

/// Initialize the low pass filter node
///
/// \param input Input node to process
///
/// \param cutoffFrequency Cutoff Frequency (Hz) ranges from 10 to 22050 (Default: 6900)
///
/// \param resonance Resonance (dB) ranges from -20 to 40 (Default: 0)
- (nonnull instancetype)init:(AKNode * _Nonnull)input cutoffFrequency:(double)cutoffFrequency resonance:(double)resonance OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// AudioKit version of Apple's LowShelfFilter Audio Unit
///
/// \param input Input node to process
///
/// \param cutoffFrequency Cutoff Frequency (Hz) ranges from 10 to 200 (Default: 80)
///
/// \param gain Gain (dB) ranges from -40 to 40 (Default: 0)
SWIFT_CLASS("_TtC8AudioKit16AKLowShelfFilter")
@interface AKLowShelfFilter : AKNode

/// Cutoff Frequency (Hz) ranges from 10 to 200 (Default: 80)
@property (nonatomic) double cutoffFrequency;

/// Gain (dB) ranges from -40 to 40 (Default: 0)
@property (nonatomic) double gain;

/// Dry/Wet Mix (Default 100)
@property (nonatomic) double dryWetMix;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;

/// Initialize the low shelf filter node
///
/// \param input Input node to process
///
/// \param cutoffFrequency Cutoff Frequency (Hz) ranges from 10 to 200 (Default: 80)
///
/// \param gain Gain (dB) ranges from -40 to 40 (Default: 0)
- (nonnull instancetype)init:(AKNode * _Nonnull)input cutoffFrequency:(double)cutoffFrequency gain:(double)gain OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// This is an implementation of Zoelzer's parametric equalizer filter.
///
/// \param input Input node to process
///
/// \param cornerFrequency Corner frequency.
///
/// \param gain Amount at which the corner frequency value shall be increased or decreased. A value of 1 is a flat response.
///
/// \param q Q of the filter. sqrt(0.5) is no resonance.
SWIFT_CLASS("_TtC8AudioKit35AKLowShelfParametricEqualizerFilter")
@interface AKLowShelfParametricEqualizerFilter : AKNode

/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;

/// Corner frequency.
@property (nonatomic) double cornerFrequency;

/// Amount at which the corner frequency value shall be increased or decreased. A value of 1 is a flat response.
@property (nonatomic) double gain;

/// Q of the filter. sqrt(0.5) is no resonance.
@property (nonatomic) double q;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this equalizer node
///
/// \param input Input node to process
///
/// \param cornerFrequency Corner frequency.
///
/// \param gain Amount at which the corner frequency value shall be increased or decreased. A value of 1 is a flat response.
///
/// \param q Q of the filter. sqrt(0.5) is no resonance.
- (nonnull instancetype)init:(AKNode * _Nonnull)input cornerFrequency:(double)cornerFrequency gain:(double)gain q:(double)q OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// A version of AKInstrument specifically targeted to instruments that should be triggerable via MIDI or sequenced with the sequencer.
SWIFT_CLASS("_TtC8AudioKit16AKMIDIInstrument")
@interface AKMIDIInstrument : AKNode

/// MIDI Input
@property (nonatomic) MIDIEndpointRef midiIn;

/// Name of the instrument
@property (nonatomic, copy) NSString * _Nonnull name;

/// Initialize the MIDI instrument
///
/// \param instrument A polyphonic instrument that will be triggered via MIDI
- (nonnull instancetype)initWithInstrument:(AKPolyphonicInstrument * _Nonnull)instrument OBJC_DESIGNATED_INITIALIZER;

/// Enable MIDI input from a given MIDI client This is not in the init function because it must be called AFTER you start audiokit
///
/// \param midiClient A refernce to the midi client
///
/// \param name Name to connect with
- (void)enableMIDI:(MIDIClientRef)midiClient name:(NSString * _Nonnull)name;

/// Handle MIDI commands that come in externally
///
/// \param note MIDI Note number
///
/// \param velocity MIDI velocity
///
/// \param channel MIDI channel
- (void)midiNoteOn:(NSInteger)note velocity:(NSInteger)velocity channel:(NSInteger)channel;

/// Start a note
- (void)startNote:(NSInteger)note withVelocity:(NSInteger)velocity onChannel:(NSInteger)channel;

/// Stop a note
- (void)stopNote:(NSInteger)note onChannel:(NSInteger)channel;
@end

@class AVAudioUnitSampler;
@class NSMutableDictionary;


/// Sampler audio generation.
///
/// <ol><li>init the audio unit like this: var sampler = AKSampler()</li><li>load a sound a file: sampler.loadWav("path/to/your/sound/file/in/app/bundle") (without wav extension)</li><li>connect to the avengine: AudioKit.output = sampler</li><li>start the engine AudioKit.start()</li></ol>
SWIFT_CLASS("_TtC8AudioKit9AKSampler")
@interface AKSampler : AKNode

/// Sampler AV Audio Unit
@property (nonatomic, strong) AVAudioUnitSampler * _Nonnull samplerUnit;

/// Initialize the sampler node
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Load a wav file
///
/// \param file Name of the file without an extension (assumed to be accessible from the bundle)
- (void)loadWav:(NSString * _Nonnull)file;

/// Load an EXS24 sample data file
///
/// \param file Name of the EXS24 file without the .exs extension
- (void)loadEXS24:(NSString * _Nonnull)file;

/// Load a SoundFont SF2 sample data file
///
/// \param file Name of the SoundFont SF2 file without the .sf2 extension
- (void)loadSoundfont:(NSString * _Nonnull)file;

/// Load a file path
///
/// \param file Name of the file with the extension
- (void)loadPath:(NSString * _Nonnull)filePath;
+ (NSMutableDictionary * _Nonnull)generateTemplateDictionary:(NSInteger)rootNote filename:(NSString * _Nonnull)filename startNote:(NSInteger)startNote endNote:(NSInteger)endNote;

/// Output Amplitude. Range: -90.0 -> +12 db Default: 0 db
@property (nonatomic) double amplitude;

/// Normalised Output Volume. Range:   0 - 1 Default: 1
@property (nonatomic) double volume;

/// Play a MIDI Note
///
/// \param note MIDI Note Number to play
///
/// \param velocity MIDI Velocity
///
/// \param channel MIDI Channnel
- (void)playNote:(NSInteger)note velocity:(NSInteger)velocity channel:(NSInteger)channel;

/// Stop a MIDI Note
///
/// \param note MIDI Note Number to stop
///
/// \param channel MIDI Channnel
- (void)stopNote:(NSInteger)note channel:(NSInteger)channel;
@end



/// MIDI receiving Sampler
///
/// be sure to enableMIDI if you want to receive messages
SWIFT_CLASS("_TtC8AudioKit13AKMIDISampler")
@interface AKMIDISampler : AKSampler

/// MIDI Input
@property (nonatomic) MIDIEndpointRef midiIn;

/// Name of the instrument
@property (nonatomic, copy) NSString * _Nonnull name;

/// Enable MIDI input from a given MIDI client This is not in the init function because it must be called AFTER you start audiokit
///
/// \param midiClient A refernce to the midi client
///
/// \param name Name to connect with
- (void)enableMIDI:(MIDIClientRef)midiClient name:(NSString * _Nonnull)name;

/// Handle MIDI commands that come in externally
///
/// \param note MIDI Note number
///
/// \param velocity MIDI velocity
///
/// \param channel MIDI channel
- (void)midiNoteOn:(NSInteger)note velocity:(NSInteger)velocity channel:(NSInteger)channel;

/// Handle MIDI CC that come in externally
///
/// \param cc MIDI cc number
///
/// \param value MIDI cc value
///
/// \param channel MIDI cc channel
- (void)midiCC:(NSInteger)cc value:(NSInteger)value channel:(NSInteger)channel;

/// Start a note
- (void)startNote:(NSInteger)note withVelocity:(NSInteger)velocity onChannel:(NSInteger)channel;

/// Stop a note
- (void)stopNote:(NSInteger)note onChannel:(NSInteger)channel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// \param leftBoundaryCondition Boundary condition at left end of bar. 1 = clamped, 2 = pivoting, 3 = free
///
/// \param rightBoundaryCondition Boundary condition at right end of bar. 1 = clamped, 2 = pivoting, 3 = free
///
/// \param decayDuration 30db decay time (in seconds).
///
/// \param scanSpeed Speed of scanning the output location.
///
/// \param position Position along bar that strike occurs.
///
/// \param strikeVelocity Normalized strike velocity
///
/// \param strikeWidth Spatial width of strike.
///
/// \param stiffness Dimensionless stiffness parameter
///
/// \param highFrequencyDamping High-frequency loss parameter. Keep this small
SWIFT_CLASS("_TtC8AudioKit10AKMetalBar")
@interface AKMetalBar : AKNode

/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;

/// Boundary condition at left end of bar. 1 = clamped, 2 = pivoting, 3 = free
@property (nonatomic) double leftBoundaryCondition;

/// Boundary condition at right end of bar. 1 = clamped, 2 = pivoting, 3 = free
@property (nonatomic) double rightBoundaryCondition;

/// 30db decay time (in seconds).
@property (nonatomic) double decayDuration;

/// Speed of scanning the output location.
@property (nonatomic) double scanSpeed;

/// Position along bar that strike occurs.
@property (nonatomic) double position;

/// Normalized strike velocity
@property (nonatomic) double strikeVelocity;

/// Spatial width of strike.
@property (nonatomic) double strikeWidth;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this Bar node
///
/// \param leftBoundaryCondition Boundary condition at left end of bar. 1 = clamped, 2 = pivoting, 3 = free
///
/// \param rightBoundaryCondition Boundary condition at right end of bar. 1 = clamped, 2 = pivoting, 3 = free
///
/// \param decayDuration 30db decay time (in seconds).
///
/// \param scanSpeed Speed of scanning the output location.
///
/// \param position Position along bar that strike occurs.
///
/// \param strikeVelocity Normalized strike velocity
///
/// \param strikeWidth Spatial width of strike.
///
/// \param stiffness Dimensionless stiffness parameter
///
/// \param highFrequencyDamping High-frequency loss parameter. Keep this small
- (nonnull instancetype)initWithLeftBoundaryCondition:(double)leftBoundaryCondition rightBoundaryCondition:(double)rightBoundaryCondition decayDuration:(double)decayDuration scanSpeed:(double)scanSpeed position:(double)position strikeVelocity:(double)strikeVelocity strikeWidth:(double)strikeWidth stiffness:(double)stiffness highFrequencyDamping:(double)highFrequencyDamping OBJC_DESIGNATED_INITIALIZER;

/// Trigger the sound with an optional set of parameters
- (void)trigger;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// Audio from the standard input
SWIFT_CLASS("_TtC8AudioKit12AKMicrophone")
@interface AKMicrophone : AKNode

/// Output Volume (Default 1)
@property (nonatomic) double volume;

/// Determine if the microphone is currently on.
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize the microphone
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// AudioKit version of Apple's Mixer Node
SWIFT_CLASS("_TtC8AudioKit7AKMixer")
@interface AKMixer : AKNode

/// Output Volume (Default 1)
@property (nonatomic) double volume;

/// Determine if the mixer is serving any output or if it is stopped.
@property (nonatomic, readonly) BOOL isStarted;

/// Connnect another input after initialization
///
/// \param input AKNode to connect
- (void)connect:(AKNode * _Nonnull)input;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// A modal resonance filter used for modal synthesis. Plucked and bell sounds can be created using  passing an impulse through a combination of modal filters.
///
/// \param input Input node to process
///
/// \param frequency Resonant frequency of the filter.
///
/// \param qualityFactor Quality factor of the filter. Roughly equal to Q/frequency.
SWIFT_CLASS("_TtC8AudioKit22AKModalResonanceFilter")
@interface AKModalResonanceFilter : AKNode

/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;

/// Resonant frequency of the filter.
@property (nonatomic) double frequency;

/// Quality factor of the filter. Roughly equal to Q/frequency.
@property (nonatomic) double qualityFactor;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this filter node
///
/// \param input Input node to process
///
/// \param frequency Resonant frequency of the filter.
///
/// \param qualityFactor Quality factor of the filter. Roughly equal to Q/frequency.
- (nonnull instancetype)init:(AKNode * _Nonnull)input frequency:(double)frequency qualityFactor:(double)qualityFactor OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// Moog Ladder is an new digital implementation of the Moog ladder filter based on the work of Antti Huovilainen, described in the paper "Non-Linear Digital Implementation of the Moog Ladder Filter" (Proceedings of DaFX04, Univ of Napoli). This implementation is probably a more accurate digital representation of the original analogue filter.
///
/// \param input Input node to process
///
/// \param cutoffFrequency Filter cutoff frequency.
///
/// \param resonance Resonance, generally < 1, but not limited to it. Higher than 1 resonance values might cause aliasing, analogue synths generally allow resonances to be above 1.
SWIFT_CLASS("_TtC8AudioKit12AKMoogLadder")
@interface AKMoogLadder : AKNode

/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;

/// Filter cutoff frequency.
@property (nonatomic) double cutoffFrequency;

/// Resonance, generally < 1, but not limited to it. Higher than 1 resonance values might cause aliasing, analogue synths generally allow resonances to be above 1.
@property (nonatomic) double resonance;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this filter node
///
/// \param input Input node to process
///
/// \param cutoffFrequency Filter cutoff frequency.
///
/// \param resonance Resonance, generally < 1, but not limited to it. Higher than 1 resonance values might cause aliasing, analogue synths generally allow resonances to be above 1.
- (nonnull instancetype)init:(AKNode * _Nonnull)input cutoffFrequency:(double)cutoffFrequency resonance:(double)resonance OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// This is an oscillator with linear interpolation that is capable of morphing between an arbitrary number of wavetables.
///
/// \param frequency Frequency (in Hz)
///
/// \param amplitude Amplitude (typically a value between 0 and 1).
///
/// \param index Index of the wavetable to use (fractional are okay).
///
/// \param detuningOffset Frequency offset in Hz.
///
/// \param detuningMultiplier Frequency detuning multiplier
///
/// \param waveformCount Number of waveforms.
///
/// \param phase Initial phase of waveform, expects a value 0-1
SWIFT_CLASS("_TtC8AudioKit20AKMorphingOscillator")
@interface AKMorphingOscillator : AKVoice

/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;

/// In cycles per second, or Hz.
@property (nonatomic) double frequency;

/// Output Amplitude.
@property (nonatomic) double amplitude;

/// Index of the wavetable to use (fractional are okay).
@property (nonatomic) double index;

/// Frequency offset in Hz.
@property (nonatomic) double detuningOffset;

/// Frequency detuning multiplier
@property (nonatomic) double detuningMultiplier;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize the oscillator with defaults
- (nonnull instancetype)init;

/// Function create an identical new node for use in creating polyphonic instruments
- (AKVoice * _Nonnull)duplicate;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


@class NSCoder;


/// Plot the FFT output from any node in an signal processing graph
SWIFT_CLASS("_TtC8AudioKit13AKNodeFFTPlot")
@interface AKNodeFFTPlot : EZAudioPlot <EZAudioFFTDelegate>

/// The node whose output to graph
@property (nonatomic, strong) AKNode * _Nullable node;

/// Required coder-based initialization (for use with Interface Builder)
///
/// \param coder NSCoder
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// Initialize the plot with the output from a given node and optional plot size
///
/// \param input AKNode from which to get the plot data
///
/// \param width Width of the view
///
/// \param height Height of the view
- (nonnull instancetype)init:(AKNode * _Nonnull)input frame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// Callback function for FFT data:
///
/// \param fft EZAudioFFT Reference
///
/// \param updatedWithFFTData A pointer to a c-style array of floats
///
/// \param bufferSize Number of elements in the FFT Data array
- (void)fft:(EZAudioFFT * _Null_unspecified)fft updatedWithFFTData:(float * _Null_unspecified)fftData bufferSize:(vDSP_Length)bufferSize;
@end



/// Plot the output from any node in an signal processing graph
SWIFT_CLASS("_TtC8AudioKit16AKNodeOutputPlot")
@interface AKNodeOutputPlot : EZAudioPlot

/// The node whose output to graph
@property (nonatomic, strong) AKNode * _Nullable node;

/// Required coder-based initialization (for use with Interface Builder)
///
/// \param coder NSCoder
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// Initialize the plot with the output from a given node and optional plot size
///
/// \param input AKNode from which to get the plot data
///
/// \param width Width of the view
///
/// \param height Height of the view
- (nonnull instancetype)init:(AKNode * _Nonnull)input frame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end



/// Noise generator that can be played polyphonically as a mix of pink and white noise
SWIFT_CLASS("_TtC8AudioKit16AKNoiseGenerator")
@interface AKNoiseGenerator : AKPolyphonicInstrument

/// Balance of white to pink noise
@property (nonatomic) double whitePinkMix;

/// Attack time
@property (nonatomic) double attackDuration;

/// Decay time
@property (nonatomic) double decayDuration;

/// Sustain Level
@property (nonatomic) double sustainLevel;

/// Release time
@property (nonatomic) double releaseDuration;

/// Initial the noise generator instrument
///
/// \param whitePinkMix Balance of white to pink noise
///
/// \param voiceCount Maximum number of simultaneous voices
- (nonnull instancetype)initWithWhitePinkMix:(double)whitePinkMix voiceCount:(NSInteger)voiceCount OBJC_DESIGNATED_INITIALIZER;

/// Start playback of a particular voice with MIDI style note and velocity
///
/// \param voice Voice to start
///
/// \param note MIDI Note Number
///
/// \param velocity MIDI Velocity (0-127)
- (void)playVoice:(AKVoice * _Nonnull)voice note:(NSInteger)note velocity:(NSInteger)velocity;

/// Stop playback of a particular voice
///
/// \param voice Voice to stop
///
/// \param note MIDI Note Number
- (void)stopVoice:(AKVoice * _Nonnull)voice note:(NSInteger)note;
@end



/// Operation-based effect
SWIFT_CLASS("_TtC8AudioKit17AKOperationEffect")
@interface AKOperationEffect : AKNode

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Parameters for changing internal operations
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull parameters;

/// Initialize the effect with an input and a valid Sporth string
///
/// \param input AKNode to use for processing
///
/// \param sporth String of valid Sporth code
- (nonnull instancetype)init:(AKNode * _Nonnull)input sporth:(NSString * _Nonnull)sporth OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// Operation-based generator
SWIFT_CLASS("_TtC8AudioKit20AKOperationGenerator")
@interface AKOperationGenerator : AKNode

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Parameters for changing internal operations
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull parameters;

/// Initialize this generator node with a generic sporth stack and a triggering flag
///
/// \param sporth String of valid Sporth code
- (nonnull instancetype)init:(NSString * _Nonnull)sporth OBJC_DESIGNATED_INITIALIZER;

/// Trigger the sound with current parameters
- (void)trigger;

/// Trigger the sound with a set of parameters
///
/// \param parameters An array of doubles to use as parameters
- (void)trigger:(NSArray<NSNumber *> * _Nonnull)parameters;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// Reads from the table sequentially and repeatedly at given frequency. Linear interpolation is applied for table look up from internal phase values.
///
/// \param frequency Frequency in cycles per second
///
/// \param amplitude Output Amplitude.
///
/// \param detuningOffset Frequency offset in Hz.
///
/// \param detuningMultiplier Frequency detuning multiplier
SWIFT_CLASS("_TtC8AudioKit12AKOscillator")
@interface AKOscillator : AKVoice

/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;

/// In cycles per second, or Hz.
@property (nonatomic) double frequency;

/// Output Amplitude.
@property (nonatomic) double amplitude;

/// Frequency offset in Hz.
@property (nonatomic) double detuningOffset;

/// Frequency detuning multiplier
@property (nonatomic) double detuningMultiplier;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize the oscillator with defaults
- (nonnull instancetype)init;

/// Function create an identical new node for use in creating polyphonic instruments
- (AKVoice * _Nonnull)duplicate;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end

@class UIView;


/// Wrapper class for plotting audio from the final mix in a waveform plot
SWIFT_CLASS("_TtC8AudioKit20AKOutputWaveformPlot")
@interface AKOutputWaveformPlot : EZAudioPlot

/// Initialize the plot in a frame
///
/// \param frame CGRect in which to draw the plot
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// Required coder-based initialization (for use with Interface Builder)
///
/// \param coder NSCoder
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// Create a View with the plot (usually for playgrounds)
///
/// \param width Width of the view
///
/// \param height Height of the view
///
/// \returns  AKView
+ (UIView * _Nonnull)createView:(CGFloat)width height:(CGFloat)height;
@end



/// A wrapper for AKSquareOscillator to make it playable as a polyphonic instrument.
SWIFT_CLASS("_TtC8AudioKit10AKPWMSynth")
@interface AKPWMSynth : AKPolyphonicInstrument

/// Duty cycle width (range 0-1).
@property (nonatomic) double pulseWidth;

/// Attack time
@property (nonatomic) double attackDuration;

/// Decay time
@property (nonatomic) double decayDuration;

/// Sustain Level
@property (nonatomic) double sustainLevel;

/// Release time
@property (nonatomic) double releaseDuration;

/// Instantiate the Square Instrument
///
/// \param voiceCount Maximum number of voices that will be required
- (nonnull instancetype)initWithVoiceCount:(NSInteger)voiceCount OBJC_DESIGNATED_INITIALIZER;

/// Start playback of a particular voice with MIDI style note and velocity
///
/// \param voice Voice to start
///
/// \param note MIDI Note Number
///
/// \param velocity MIDI Velocity (0-127)
- (void)playVoice:(AKVoice * _Nonnull)voice note:(NSInteger)note velocity:(NSInteger)velocity;

/// Stop playback of a particular voice
///
/// \param voice Voice to stop
///
/// \param note MIDI Note Number
- (void)stopVoice:(AKVoice * _Nonnull)voice note:(NSInteger)note;
@end



/// Stereo Panner
///
/// \param input Input node to process
///
/// \param pan Panning. A value of -1 is hard left, and a value of 1 is hard right, and 0 is center.
SWIFT_CLASS("_TtC8AudioKit8AKPanner")
@interface AKPanner : AKNode

/// Panning. A value of -1 is hard left, and a value of 1 is hard right, and 0 is center.
@property (nonatomic) double pan;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isPlaying;

/// Tells whether the node is not processing (ie. stopped or bypassed)
@property (nonatomic, readonly) BOOL isStopped;

/// Tells whether the node is not processing (ie. stopped or bypassed)
@property (nonatomic, readonly) BOOL isBypassed;

/// Initialize this panner node
///
/// \param input Input node to process
///
/// \param pan Panning. A value of -1 is hard left, and a value of 1 is hard right, and 0 is center.
- (nonnull instancetype)init:(AKNode * _Nonnull)input pan:(double)pan OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;

/// Function to start, play, or activate the node, all do the same thing
- (void)play;

/// Function to stop or bypass the node, both are equivalent
- (void)bypass;
@end



/// AudioKit version of Apple's ParametricEQ Audio Unit
///
/// \param input Input node to process
///
/// \param centerFrequency Center Freq (Hz) ranges from 20 to 22050 (Default: 2000)
///
/// \param q Q (Hz) ranges from 0.1 to 20 (Default: 1.0)
///
/// \param gain Gain (dB) ranges from -20 to 20 (Default: 0)
SWIFT_CLASS("_TtC8AudioKit14AKParametricEQ")
@interface AKParametricEQ : AKNode

/// Center Freq (Hz) ranges from 20 to 22050 (Default: 2000)
@property (nonatomic) double centerFrequency;

/// Q (Hz) ranges from 0.1 to 20 (Default: 1.0)
@property (nonatomic) double q;

/// Gain (dB) ranges from -20 to 20 (Default: 0)
@property (nonatomic) double gain;

/// Dry/Wet Mix (Default 100)
@property (nonatomic) double dryWetMix;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;

/// Initialize the parametric eq node
///
/// \param input Input node to process
///
/// \param centerFrequency Center Frequency (Hz) ranges from 20 to 22050 (Default: 2000)
///
/// \param q Q (Hz) ranges from 0.1 to 20 (Default: 1.0)
///
/// \param gain Gain (dB) ranges from -20 to 20 (Default: 0)
- (nonnull instancetype)init:(AKNode * _Nonnull)input centerFrequency:(double)centerFrequency q:(double)q gain:(double)gain OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// AudioKit version of Apple's PeakLimiter Audio Unit
///
/// \param input Input node to process
///
/// \param attackTime Attack Time (Secs) ranges from 0.001 to 0.03 (Default: 0.012)
///
/// \param decayTime Decay Time (Secs) ranges from 0.001 to 0.06 (Default: 0.024)
///
/// \param preGain Pre Gain (dB) ranges from -40 to 40 (Default: 0)
SWIFT_CLASS("_TtC8AudioKit13AKPeakLimiter")
@interface AKPeakLimiter : AKNode

/// Attack Time (Secs) ranges from 0.001 to 0.03 (Default: 0.012)
@property (nonatomic) double attackTime;

/// Decay Time (Secs) ranges from 0.001 to 0.06 (Default: 0.024)
@property (nonatomic) double decayTime;

/// Pre Gain (dB) ranges from -40 to 40 (Default: 0)
@property (nonatomic) double preGain;

/// Dry/Wet Mix (Default 100)
@property (nonatomic) double dryWetMix;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;

/// Initialize the peak limiter node
///
/// \param input Input node to process
///
/// \param attackTime Attack Time (Secs) ranges from 0.001 to 0.03 (Default: 0.012)
///
/// \param decayTime Decay Time (Secs) ranges from 0.001 to 0.06 (Default: 0.024)
///
/// \param preGain Pre Gain (dB) ranges from -40 to 40 (Default: 0)
- (nonnull instancetype)init:(AKNode * _Nonnull)input attackTime:(double)attackTime decayTime:(double)decayTime preGain:(double)preGain OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// This is an implementation of Zoelzer's parametric equalizer filter.
///
/// \param input Input node to process
///
/// \param centerFrequency Center frequency.
///
/// \param gain Amount at which the center frequency value shall be increased or decreased. A value of 1 is a flat response.
///
/// \param q Q of the filter. sqrt(0.5) is no resonance.
SWIFT_CLASS("_TtC8AudioKit34AKPeakingParametricEqualizerFilter")
@interface AKPeakingParametricEqualizerFilter : AKNode

/// Center frequency.
@property (nonatomic) double centerFrequency;

/// Amount at which the center frequency value shall be increased or decreased. A value of 1 is a flat response.
@property (nonatomic) double gain;

/// Q of the filter. sqrt(0.5) is no resonance.
@property (nonatomic) double q;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this equalizer node
///
/// \param input Input node to process
///
/// \param centerFrequency Center frequency.
///
/// \param gain Amount at which the center frequency value shall be increased or decreased. A value of 1 is a flat response.
///
/// \param q Q of the filter. sqrt(0.5) is no resonance.
- (nonnull instancetype)init:(AKNode * _Nonnull)input centerFrequency:(double)centerFrequency gain:(double)gain q:(double)q OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// This is a phase locked vocoder. It has the ability to play back an audio file loaded into an ftable like a sampler would. Unlike a typical sampler, mincer allows time and pitch to be controlled separately.
///
/// \param audioFileURL Location of the audio file to use.
///
/// \param position Position in time. When non-changing it will do a spectral freeze of a the current point in time.
///
/// \param amplitude Amplitude.
///
/// \param pitchRatio Pitch ratio. A value of. 1  normal, 2 is double speed, 0.5 is halfspeed, etc.
SWIFT_CLASS("_TtC8AudioKit20AKPhaseLockedVocoder")
@interface AKPhaseLockedVocoder : AKNode

/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;

/// Position in time. When non-changing it will do a spectral freeze of a the current point in time.
@property (nonatomic) double position;

/// Amplitude.
@property (nonatomic) double amplitude;

/// Pitch ratio. A value of. 1  normal, 2 is double speed, 0.5 is halfspeed, etc.
@property (nonatomic) double pitchRatio;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this Phase-Locked Vocoder node
///
/// \param audioFileURL Location of the audio file to use.
///
/// \param position Position in time. When non-changing it will do a spectral freeze of a the current point in time.
///
/// \param amplitude Amplitude.
///
/// \param pitchRatio Pitch ratio. A value of. 1  normal, 2 is double speed, 0.5 is halfspeed, etc.
- (nonnull instancetype)initWithAudioFileURL:(NSURL * _Nonnull)audioFileURL position:(double)position amplitude:(double)amplitude pitchRatio:(double)pitchRatio OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// Faust-based pink noise generator
///
/// \param amplitude Amplitude. (Value between 0-1).
SWIFT_CLASS("_TtC8AudioKit11AKPinkNoise")
@interface AKPinkNoise : AKVoice

/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;

/// Amplitude. (Value between 0-1).
@property (nonatomic) double amplitude;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize the noise generator with defaults
- (nonnull instancetype)init;

/// Initialize this noise node
///
/// \param amplitude Amplitude. (Value between 0-1).
- (nonnull instancetype)initWithAmplitude:(double)amplitude OBJC_DESIGNATED_INITIALIZER;

/// Function create an identical new node for use in creating polyphonic instruments
- (AKVoice * _Nonnull)duplicate;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// Karplus-Strong plucked string instrument.
///
/// \param frequency Variable frequency. Values less than the initial frequency will be doubled until it is greater than that.
///
/// \param amplitude Amplitude
///
/// \param lowestFrequency This frequency is used to allocate all the buffers needed for the delay. This should be the lowest frequency you plan on using.
SWIFT_CLASS("_TtC8AudioKit15AKPluckedString")
@interface AKPluckedString : AKVoice

/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;

/// Variable frequency. Values less than the initial frequency will be doubled until it is greater than that.
@property (nonatomic) double frequency;

/// Amplitude
@property (nonatomic) double amplitude;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this pluck node
///
/// \param frequency Variable frequency. Values less than the initial frequency will be doubled until it is greater than that.
///
/// \param amplitude Amplitude
///
/// \param lowestFrequency This frequency is used to allocate all the buffers needed for the delay. This should be the lowest frequency you plan on using.
- (nonnull instancetype)initWithFrequency:(double)frequency amplitude:(double)amplitude lowestFrequency:(double)lowestFrequency OBJC_DESIGNATED_INITIALIZER;

/// Function create an identical new node for use in creating polyphonic instruments
- (AKVoice * _Nonnull)duplicate;

/// Trigger the sound with an optional set of parameters
///
/// <ul><li>amplitude amplitude: Volume</li></ul>
/// \param frequency Frequency in Hz
- (void)triggerWithFrequency:(double)frequency amplitude:(double)amplitude;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end




/// AudioKit version of Apple's Reverb Audio Unit
///
/// \param input AKNode to reverberate
///
/// \param dryWetMix Amount of processed signal (Default: 0.5, Minimum: 0, Maximum: 1)
SWIFT_CLASS("_TtC8AudioKit8AKReverb")
@interface AKReverb : AKNode

/// Dry/Wet Mix (Default 0.5)
@property (nonatomic) double dryWetMix;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;

/// Initialize the reverb node
///
/// \param input AKNode to reverberate
///
/// \param dryWetMix Amount of processed signal (Default: 0.5, Minimum: 0, Maximum: 1)
- (nonnull instancetype)init:(AKNode * _Nonnull)input dryWetMix:(double)dryWetMix OBJC_DESIGNATED_INITIALIZER;

/// Load an Apple Factory Preset
- (void)loadFactoryPreset:(AVAudioUnitReverbPreset)preset;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// AudioKit version of Apple's Reverb2 Audio Unit
///
/// \param input Input node to process
///
/// \param dryWetMix Dry Wet Mix (CrossFade) ranges from 0 to  (Default: 0.5)
///
/// \param gain Gain (Decibels) ranges from -20 to 20 (Default: 0)
///
/// \param minDelayTime Min Delay Time (Secs) ranges from 0.0001 to 1.0 (Default: 0.008)
///
/// \param maxDelayTime Max Delay Time (Secs) ranges from 0.0001 to 1.0 (Default: 0.050)
///
/// \param decayTimeAt0Hz Decay Time At0 Hz (Secs) ranges from 0.001 to 20.0 (Default: 1.0)
///
/// \param decayTimeAtNyquist Decay Time At Nyquist (Secs) ranges from 0.001 to 20.0 (Default: 0.5)
///
/// \param randomizeReflections Randomize Reflections (Integer) ranges from 1 to 1000 (Default: 1)
SWIFT_CLASS("_TtC8AudioKit9AKReverb2")
@interface AKReverb2 : AKNode

/// Dry Wet Mix (CrossFade) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double dryWetMix;

/// Gain (Decibels) ranges from -20 to 20 (Default: 0)
@property (nonatomic) double gain;

/// Min Delay Time (Secs) ranges from 0.0001 to 1.0 (Default: 0.008)
@property (nonatomic) double minDelayTime;

/// Max Delay Time (Secs) ranges from 0.0001 to 1.0 (Default: 0.050)
@property (nonatomic) double maxDelayTime;

/// Decay Time At0 Hz (Secs) ranges from 0.001 to 20.0 (Default: 1.0)
@property (nonatomic) double decayTimeAt0Hz;

/// Decay Time At Nyquist (Secs) ranges from 0.001 to 20.0 (Default: 0.5)
@property (nonatomic) double decayTimeAtNyquist;

/// Randomize Reflections (Integer) ranges from 1 to 1000 (Default: 1)
@property (nonatomic) double randomizeReflections;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;

/// Initialize the reverb2 node
///
/// \param input Input node to process
///
/// \param dryWetMix Dry Wet Mix (CrossFade) ranges from 0 to 1 (Default: 0.5)
///
/// \param gain Gain (Decibels) ranges from -20 to 20 (Default: 0)
///
/// \param minDelayTime Min Delay Time (Secs) ranges from 0.0001 to 1.0 (Default: 0.008)
///
/// \param maxDelayTime Max Delay Time (Secs) ranges from 0.0001 to 1.0 (Default: 0.050)
///
/// \param decayTimeAt0Hz Decay Time At0 Hz (Secs) ranges from 0.001 to 20.0 (Default: 1.0)
///
/// \param decayTimeAtNyquist Decay Time At Nyquist (Secs) ranges from 0.001 to 20.0 (Default: 0.5)
///
/// \param randomizeReflections Randomize Reflections (Integer) ranges from 1 to 1000 (Default: 1)
- (nonnull instancetype)init:(AKNode * _Nonnull)input dryWetMix:(double)dryWetMix gain:(double)gain minDelayTime:(double)minDelayTime maxDelayTime:(double)maxDelayTime decayTimeAt0Hz:(double)decayTimeAt0Hz decayTimeAtNyquist:(double)decayTimeAtNyquist randomizeReflections:(double)randomizeReflections OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// AudioKit version of Apple's Ring Modulator from the Distortion Audio Unit
///
/// \param input Input node to process
///
/// \param frequency1 Frequency1 (Hertz) ranges from 0.5 to 8000 (Default: 100)
///
/// \param frequency2 Frequency2 (Hertz) ranges from 0.5 to 8000 (Default: 100)
///
/// \param balance Balance (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param mix Mix (Normalized Value) ranges from 0 to 1 (Default: 1)
SWIFT_CLASS("_TtC8AudioKit15AKRingModulator")
@interface AKRingModulator : AKNode

/// Frequency1 (Hertz) ranges from 0.5 to 8000 (Default: 100)
@property (nonatomic) double frequency1;

/// Frequency2 (Hertz) ranges from 0.5 to 8000 (Default: 100)
@property (nonatomic) double frequency2;

/// Ring Mod Balance (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double balance;

/// Mix (Normalized Value) ranges from 0 to 1 (Default: 1)
@property (nonatomic) double mix;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;

/// Initialize the ring modulator node
///
/// \param input Input node to process
///
/// \param frequency1 Frequency1 (Hertz) ranges from 0.5 to 8000 (Default: 100)
///
/// \param frequency2 Frequency2 (Hertz) ranges from 0.5 to 8000 (Default: 100)
///
/// \param balance Balance (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param mix Mix (Normalized Value) ranges from 0 to 1 (Default: 1)
- (nonnull instancetype)init:(AKNode * _Nonnull)input frequency1:(double)frequency1 frequency2:(double)frequency2 balance:(double)balance mix:(double)mix OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// Emulation of the Roland TB-303 filter
///
/// \param input Input node to process
///
/// \param cutoffFrequency Cutoff frequency. (in Hertz)
///
/// \param resonance Resonance, generally < 1, but not limited to it. Higher than 1 resonance values might cause aliasing, analogue synths generally allow resonances to be above 1.
///
/// \param distortion Distortion. Value is typically 2.0; deviation from this can cause stability issues.
///
/// \param resonanceAsymmetry Asymmetry of resonance. Value is between 0-1
SWIFT_CLASS("_TtC8AudioKit19AKRolandTB303Filter")
@interface AKRolandTB303Filter : AKNode

/// Cutoff frequency. (in Hertz)
@property (nonatomic) double cutoffFrequency;

/// Resonance, generally < 1, but not limited to it. Higher than 1 resonance values might cause aliasing, analogue synths generally allow resonances to be above 1.
@property (nonatomic) double resonance;

/// Distortion. Value is typically 2.0; deviation from this can cause stability issues.
@property (nonatomic) double distortion;

/// Asymmetry of resonance. Value is between 0-1
@property (nonatomic) double resonanceAsymmetry;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this filter node
///
/// \param input Input node to process
///
/// \param cutoffFrequency Cutoff frequency. (in Hertz)
///
/// \param resonance Resonance, generally < 1, but not limited to it. Higher than 1 resonance values might cause aliasing, analogue synths generally allow resonances to be above 1.
///
/// \param distortion Distortion. Value is typically 2.0; deviation from this can cause stability issues.
///
/// \param resonanceAsymmetry Asymmetry of resonance. Value is between 0-1
- (nonnull instancetype)init:(AKNode * _Nonnull)input cutoffFrequency:(double)cutoffFrequency resonance:(double)resonance distortion:(double)distortion resonanceAsymmetry:(double)resonanceAsymmetry OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// Wrapper class for plotting audio from the final mix in a rolling plot
SWIFT_CLASS("_TtC8AudioKit19AKRollingOutputPlot")
@interface AKRollingOutputPlot : EZAudioPlot

/// Initialize the plot in a frame
///
/// \param frame CGRect in which to draw the plot
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// Required coder-based initialization (for use with Interface Builder)
///
/// \param coder NSCoder
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// Create a View with the plot (usually for playgrounds)
///
/// \param width Width of the view
///
/// \param height Height of the view
///
/// \returns  AKView
+ (UIView * _Nonnull)createView:(CGFloat)width height:(CGFloat)height;
@end




/// Bandlimited sawtooth oscillator This is a bandlimited sawtooth oscillator ported from the "sawtooth" function from the Faust programming language.
///
/// \param frequency In cycles per second, or Hz.
///
/// \param amplitude Output Amplitude.
///
/// \param detuningOffset Frequency offset in Hz.
///
/// \param detuningMultiplier Frequency detuning multiplier
SWIFT_CLASS("_TtC8AudioKit20AKSawtoothOscillator")
@interface AKSawtoothOscillator : AKVoice

/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;

/// In cycles per second, or Hz.
@property (nonatomic) double frequency;

/// Output Amplitude.
@property (nonatomic) double amplitude;

/// Frequency offset in Hz.
@property (nonatomic) double detuningOffset;

/// Frequency detuning multiplier
@property (nonatomic) double detuningMultiplier;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize the oscillator with defaults
- (nonnull instancetype)init;

/// Initialize this sawtooth node
///
/// \param frequency In cycles per second, or Hz.
///
/// \param amplitude Output Amplitude.
///
/// \param detuningOffset Frequency offset in Hz.
///
/// \param detuningMultiplier Frequency detuning multiplier
- (nonnull instancetype)initWithFrequency:(double)frequency amplitude:(double)amplitude detuningOffset:(double)detuningOffset detuningMultiplier:(double)detuningMultiplier OBJC_DESIGNATED_INITIALIZER;

/// Function create an identical new node for use in creating polyphonic instruments
- (AKVoice * _Nonnull)duplicate;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// A wrapper for AKSawtoothVoice to make it playable as a polyphonic instrument.
SWIFT_CLASS("_TtC8AudioKit15AKSawtoothSynth")
@interface AKSawtoothSynth : AKPolyphonicInstrument

/// Attack time
@property (nonatomic) double attackDuration;

/// Decay time
@property (nonatomic) double decayDuration;

/// Sustain Level
@property (nonatomic) double sustainLevel;

/// Release time
@property (nonatomic) double releaseDuration;

/// Instantiate the Sawtooth Instrument
///
/// \param voiceCount Maximum number of voices that will be required
- (nonnull instancetype)initWithVoiceCount:(NSInteger)voiceCount OBJC_DESIGNATED_INITIALIZER;

/// Start playback of a particular voice with MIDI style note and velocity
///
/// \param voice Voice to start
///
/// \param note MIDI Note Number
///
/// \param velocity MIDI Velocity (0-127)
- (void)playVoice:(AKVoice * _Nonnull)voice note:(NSInteger)note velocity:(NSInteger)velocity;

/// Stop playback of a particular voice
///
/// \param voice Voice to stop
///
/// \param note MIDI Note Number
- (void)stopVoice:(AKVoice * _Nonnull)voice note:(NSInteger)note;
@end

@class AVAudioFormat;


/// Global settings for AudioKit
SWIFT_CLASS("_TtC8AudioKit10AKSettings")
@interface AKSettings : NSObject

/// The sample rate in Hertz
+ (double)sampleRate;
+ (void)setSampleRate:(double)value;

/// Number of audio channels: 2 for stereo, 1 for mono
+ (uint32_t)numberOfChannels;
+ (void)setNumberOfChannels:(uint32_t)value;

/// Whether we should be listening to audio input (microphone)
+ (BOOL)audioInputEnabled;
+ (void)setAudioInputEnabled:(BOOL)value;

/// Whether to allow audio playback to override the mute setting
+ (BOOL)playbackWhileMuted;
+ (void)setPlaybackWhileMuted:(BOOL)value;

/// Global audio format AudioKit will default to
+ (AVAudioFormat * _Nonnull)audioFormat;

/// Whether to DefaultToSpeaker when audio input is enabled
+ (BOOL)defaultToSpeaker;
+ (void)setDefaultToSpeaker:(BOOL)value;

/// Global default rampTime value
+ (double)rampTime;
+ (void)setRampTime:(double)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// This is a bandlimited square oscillator ported from the "square" function from the Faust programming language.
///
/// \param frequency In cycles per second, or Hz.
///
/// \param amplitude Output amplitude
///
/// \param pulseWidth Duty cycle width (range 0-1).
///
/// \param detuningOffset Frequency offset in Hz.
///
/// \param detuningMultiplier Frequency detuning multiplier
SWIFT_CLASS("_TtC8AudioKit22AKSquareWaveOscillator")
@interface AKSquareWaveOscillator : AKVoice

/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;

/// In cycles per second, or Hz.
@property (nonatomic) double frequency;

/// Output Amplitude.
@property (nonatomic) double amplitude;

/// Duty cycle width (range 0-1).
@property (nonatomic) double pulseWidth;

/// Frequency offset in Hz.
@property (nonatomic) double detuningOffset;

/// Frequency detuning multiplier
@property (nonatomic) double detuningMultiplier;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize the oscillator with defaults
- (nonnull instancetype)init;

/// Initialize this oscillator node
///
/// \param frequency In cycles per second, or Hz.
///
/// \param amplitude Output amplitude
///
/// \param pulseWidth Duty cycle width (range 0-1).
///
/// \param detuningOffset Frequency offset in Hz.
///
/// \param detuningMultiplier Frequency detuning multiplier
- (nonnull instancetype)initWithFrequency:(double)frequency amplitude:(double)amplitude pulseWidth:(double)pulseWidth detuningOffset:(double)detuningOffset detuningMultiplier:(double)detuningMultiplier OBJC_DESIGNATED_INITIALIZER;

/// Function create an identical new node for use in creating polyphonic instruments
- (AKVoice * _Nonnull)duplicate;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// AKStringResonator passes the input through a network composed of comb, low-pass and all-pass filters, similar to the one used in some versions of the Karplus-Strong algorithm, creating a string resonator effect. The fundamental frequency of the “string” is controlled by the fundamentalFrequency.  This operation can be used to simulate sympathetic resonances to an input signal.
///
/// \param input Input node to process
///
/// \param fundamentalFrequency Fundamental frequency of string.
///
/// \param feedback Feedback amount (value between 0-1). A value close to 1 creates a slower decay and a more pronounced resonance. Small values may leave the input signal unaffected. Depending on the filter frequency, typical values are > .9.
SWIFT_CLASS("_TtC8AudioKit17AKStringResonator")
@interface AKStringResonator : AKNode

/// Fundamental frequency of string.
@property (nonatomic) double fundamentalFrequency;

/// Feedback amount (value between 0-1). A value close to 1 creates a slower decay and a more pronounced resonance. Small values may leave the input signal unaffected. Depending on the filter frequency, typical values are > .9.
@property (nonatomic) double feedback;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this filter node
///
/// \param input Input node to process
///
/// \param fundamentalFrequency Fundamental frequency of string.
///
/// \param feedback Feedback amount (value between 0-1). A value close to 1 creates a slower decay and a more pronounced resonance. Small values may leave the input signal unaffected. Depending on the filter frequency, typical values are > .9.
- (nonnull instancetype)init:(AKNode * _Nonnull)input fundamentalFrequency:(double)fundamentalFrequency feedback:(double)feedback OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// Kick Drum Synthesizer Instrument
SWIFT_CLASS("_TtC8AudioKit11AKSynthKick")
@interface AKSynthKick : AKPolyphonicInstrument

/// Create the synth kick instrument
///
/// \param voiceCount Number of voices (usually two is plenty for drums)
- (nonnull instancetype)initWithVoiceCount:(NSInteger)voiceCount OBJC_DESIGNATED_INITIALIZER;

/// Start playback of a particular voice with MIDI style note and velocity
///
/// \param voice Voice to start
///
/// \param note MIDI Note Number
///
/// \param velocity MIDI Velocity (0-127)
- (void)playVoice:(AKVoice * _Nonnull)voice note:(NSInteger)note velocity:(NSInteger)velocity;

/// Stop playback of a particular voice
///
/// \param voice Voice to stop
///
/// \param note MIDI Note Number
- (void)stopVoice:(AKVoice * _Nonnull)voice note:(NSInteger)note;
@end



/// Snare Drum Synthesizer Instrument
SWIFT_CLASS("_TtC8AudioKit12AKSynthSnare")
@interface AKSynthSnare : AKPolyphonicInstrument

/// Create the synth snare instrument
///
/// \param voiceCount Number of voices (usually two is plenty for drums)
- (nonnull instancetype)initWithVoiceCount:(NSInteger)voiceCount duration:(double)duration resonance:(double)resonance OBJC_DESIGNATED_INITIALIZER;

/// Start playback of a particular voice with MIDI style note and velocity
///
/// \param voice Voice to start
///
/// \param note MIDI Note Number
///
/// \param velocity MIDI Velocity (0-127)
- (void)playVoice:(AKVoice * _Nonnull)voice note:(NSInteger)note velocity:(NSInteger)velocity;

/// Stop playback of a particular voice
///
/// \param voice Voice to stop
///
/// \param note MIDI Note Number
- (void)stopVoice:(AKVoice * _Nonnull)voice note:(NSInteger)note;
@end



/// Distortion using a modified hyperbolic tangent function.
///
/// \param input Input node to process
///
/// \param pregain Determines the amount of gain applied to the signal before waveshaping. A value of 1 gives slight distortion.
///
/// \param postgain Gain applied after waveshaping
///
/// \param postiveShapeParameter Shape of the positive part of the signal. A value of 0 gets a flat clip.
///
/// \param negativeShapeParameter Like the positive shape parameter, only for the negative part.
SWIFT_CLASS("_TtC8AudioKit16AKTanhDistortion")
@interface AKTanhDistortion : AKNode

/// Determines the amount of gain applied to the signal before waveshaping. A value of 1 gives slight distortion.
@property (nonatomic) double pregain;

/// Gain applied after waveshaping
@property (nonatomic) double postgain;

/// Shape of the positive part of the signal. A value of 0 gets a flat clip.
@property (nonatomic) double postiveShapeParameter;

/// Like the positive shape parameter, only for the negative part.
@property (nonatomic) double negativeShapeParameter;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this distortion node
///
/// \param input Input node to process
///
/// \param pregain Determines the amount of gain applied to the signal before waveshaping. A value of 1 gives slight distortion.
///
/// \param postgain Gain applied after waveshaping
///
/// \param postiveShapeParameter Shape of the positive part of the signal. A value of 0 gets a flat clip.
///
/// \param negativeShapeParameter Like the positive shape parameter, only for the negative part.
- (nonnull instancetype)init:(AKNode * _Nonnull)input pregain:(double)pregain postgain:(double)postgain postiveShapeParameter:(double)postiveShapeParameter negativeShapeParameter:(double)negativeShapeParameter OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// Testing node
SWIFT_CLASS("_TtC8AudioKit8AKTester")
@interface AKTester : AKNode

/// Calculate the MD5
@property (nonatomic, readonly, copy) NSString * _Nonnull MD5;

/// Flag on whether or not the test is still in progress
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this test node
///
/// \param input AKNode to test
///
/// \param sample Number of sample to product
- (nonnull instancetype)init:(AKNode * _Nonnull)input samples:(NSInteger)samples OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// 3-pole (18 db/oct slope) Low-Pass filter with resonance and tanh distortion.
///
/// \param input Input node to process
///
/// \param distortion Distortion amount.  Zero gives a clean output. Greater than zero adds tanh distortion controlled by the filter parameters, in such a way that both low cutoff and high resonance increase the distortion amount.
///
/// \param cutoffFrequency Filter cutoff frequency in Hertz.
///
/// \param resonance Resonance. Usually a value in the range 0-1. A value of 1.0 will self oscillate at the cutoff frequency. Values slightly greater than 1 are possible for more sustained oscillation and an “overdrive” effect.
SWIFT_CLASS("_TtC8AudioKit24AKThreePoleLowpassFilter")
@interface AKThreePoleLowpassFilter : AKNode

/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;

/// Distortion amount.  Zero gives a clean output. Greater than zero adds tanh distortion controlled by the filter parameters, in such a way that both low cutoff and high resonance increase the distortion amount.
@property (nonatomic) double distortion;

/// Filter cutoff frequency in Hertz.
@property (nonatomic) double cutoffFrequency;

/// Resonance. Usually a value in the range 0-1. A value of 1.0 will self oscillate at the cutoff frequency. Values slightly greater than 1 are possible for more sustained oscillation and an “overdrive” effect.
@property (nonatomic) double resonance;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this filter node
///
/// \param input Input node to process
///
/// \param distortion Distortion amount.  Zero gives a clean output. Greater than zero adds tanh distortion controlled by the filter parameters, in such a way that both low cutoff and high resonance increase the distortion amount.
///
/// \param cutoffFrequency Filter cutoff frequency in Hertz.
///
/// \param resonance Resonance. Usually a value in the range 0-1. A value of 1.0 will self oscillate at the cutoff frequency. Values slightly greater than 1 are possible for more sustained oscillation and an “overdrive” effect.
- (nonnull instancetype)init:(AKNode * _Nonnull)input distortion:(double)distortion cutoffFrequency:(double)cutoffFrequency resonance:(double)resonance OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// AudioKit version of Apple's TimePitch Audio Unit
///
/// \param input Input node to process
///
/// \param rate Rate (rate) ranges from 0.03125 to 32.0 (Default: 1.0)
///
/// \param pitch Pitch (Cents) ranges from -2400 to 2400 (Default: 1.0)
///
/// \param overlap Overlap (generic) ranges from 3.0 to 32.0 (Default: 8.0)
SWIFT_CLASS("_TtC8AudioKit11AKTimePitch")
@interface AKTimePitch : AKNode

/// Rate (rate) ranges from 0.03125 to 32.0 (Default: 1.0)
@property (nonatomic) double rate;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Pitch (Cents) ranges from -2400 to 2400 (Default: 1.0)
@property (nonatomic) double pitch;

/// Overlap (generic) ranges from 3.0 to 32.0 (Default: 8.0)
@property (nonatomic) double overlap;

/// Initialize the time pitch node
///
/// \param input Input node to process
///
/// \param rate Rate (rate) ranges from 0.03125 to 32.0 (Default: 1.0)
///
/// \param pitch Pitch (Cents) ranges from -2400 to 2400 (Default: 1.0)
///
/// \param overlap Overlap (generic) ranges from 3.0 to 32.0 (Default: 8.0)
- (nonnull instancetype)init:(AKNode * _Nonnull)input rate:(double)rate pitch:(double)pitch overlap:(double)overlap OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// A complement to the AKLowPassFilter.
///
/// \param input Input node to process
///
/// \param halfPowerPoint Half-Power Point in Hertz. Half power is defined as peak power / square root of 2.
SWIFT_CLASS("_TtC8AudioKit22AKToneComplementFilter")
@interface AKToneComplementFilter : AKNode

/// Half-Power Point in Hertz. Half power is defined as peak power / square root of 2.
@property (nonatomic) double halfPowerPoint;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this filter node
///
/// \param input Input node to process
///
/// \param halfPowerPoint Half-Power Point in Hertz. Half power is defined as peak power / square root of 2.
- (nonnull instancetype)init:(AKNode * _Nonnull)input halfPowerPoint:(double)halfPowerPoint OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// A first-order recursive low-pass filter with variable frequency response.
///
/// \param input Input node to process
///
/// \param halfPowerPoint The response curve's half-power point, in Hertz. Half power is defined as peak power / root 2.
SWIFT_CLASS("_TtC8AudioKit12AKToneFilter")
@interface AKToneFilter : AKNode

/// The response curve's half-power point, in Hertz. Half power is defined as peak power / root 2.
@property (nonatomic) double halfPowerPoint;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this filter node
///
/// \param input Input node to process
///
/// \param halfPowerPoint The response curve's half-power point, in Hertz. Half power is defined as peak power / root 2.
- (nonnull instancetype)init:(AKNode * _Nonnull)input halfPowerPoint:(double)halfPowerPoint OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// Bandlimited triangleoscillator This is a bandlimited triangle oscillator ported from the "triangle" function from the Faust programming language.
///
/// \param frequency In cycles per second, or Hz.
///
/// \param amplitude Output Amplitude.
///
/// \param detuningOffset Frequency offset in Hz.
///
/// \param detuningMultiplier Frequency detuning multiplier
SWIFT_CLASS("_TtC8AudioKit20AKTriangleOscillator")
@interface AKTriangleOscillator : AKVoice

/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;

/// In cycles per second, or Hz.
@property (nonatomic) double frequency;

/// Output Amplitude.
@property (nonatomic) double amplitude;

/// Frequency offset in Hz.
@property (nonatomic) double detuningOffset;

/// Frequency detuning multiplier
@property (nonatomic) double detuningMultiplier;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize the oscillator with defaults
- (nonnull instancetype)init;

/// Initialize this oscillator node
///
/// \param frequency In cycles per second, or Hz.
///
/// \param amplitude Output Amplitude.
///
/// \param detuningOffset Frequency offset in Hz.
///
/// \param detuningMultiplier Frequency detuning multiplier
- (nonnull instancetype)initWithFrequency:(double)frequency amplitude:(double)amplitude detuningOffset:(double)detuningOffset detuningMultiplier:(double)detuningMultiplier OBJC_DESIGNATED_INITIALIZER;

/// Function create an identical new node for use in creating polyphonic instruments
- (AKVoice * _Nonnull)duplicate;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// AudioKit version of Apple's VariSpeed Audio Unit
///
/// \param input Input node to process
///
/// \param rate Rate (rate) ranges from 0.25 to 4.0 (Default: 1.0)
SWIFT_CLASS("_TtC8AudioKit11AKVariSpeed")
@interface AKVariSpeed : AKNode

/// Rate (rate) ranges form 0.25 to 4.0 (Default: 1.0)
@property (nonatomic) double rate;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize the varispeed node
///
/// \param input Input node to process
///
/// \param rate Rate (rate) ranges from 0.25 to 4.0 (Default: 1.0)
- (nonnull instancetype)init:(AKNode * _Nonnull)input rate:(double)rate OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// A delay line with cubic interpolation.
///
/// \param input Input node to process
///
/// \param time Delay time (in seconds) that can be changed during performance. This value must not exceed the maximum delay time.
///
/// \param feedback Feedback amount. Should be a value between 0-1.
///
/// \param maximumDelayTime The maximum delay time, in seconds.
SWIFT_CLASS("_TtC8AudioKit15AKVariableDelay")
@interface AKVariableDelay : AKNode

/// Delay time (in seconds) that can be changed during performance. This value must not exceed the maximum delay time.
@property (nonatomic) double time;

/// Feedback amount. Should be a value between 0-1.
@property (nonatomic) double feedback;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize this delay node
///
/// \param input Input node to process
///
/// \param time Delay time (in seconds) that can be changed during performance. This value must not exceed the maximum delay time.
///
/// \param feedback Feedback amount. Should be a value between 0-1.
///
/// \param maximumDelayTime The maximum delay time, in seconds.
- (nonnull instancetype)init:(AKNode * _Nonnull)input time:(double)time feedback:(double)feedback maximumDelayTime:(double)maximumDelayTime OBJC_DESIGNATED_INITIALIZER;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end




/// A wrapper for AKOscillator to make it playable as a polyphonic instrument.
SWIFT_CLASS("_TtC8AudioKit16AKWavetableSynth")
@interface AKWavetableSynth : AKPolyphonicInstrument

/// Attack time
@property (nonatomic) double attackDuration;

/// Decay time
@property (nonatomic) double decayDuration;

/// Sustain Level
@property (nonatomic) double sustainLevel;

/// Release time
@property (nonatomic) double releaseDuration;

/// Start playback of a particular voice with MIDI style note and velocity
///
/// \param voice Voice to start
///
/// \param note MIDI Note Number
///
/// \param velocity MIDI Velocity (0-127)
- (void)playVoice:(AKVoice * _Nonnull)voice note:(NSInteger)note velocity:(NSInteger)velocity;

/// Stop playback of a particular voice
///
/// \param voice Voice to stop
///
/// \param note MIDI Note Number
- (void)stopVoice:(AKVoice * _Nonnull)voice note:(NSInteger)note;
@end



/// White noise generator
///
/// \param amplitude Amplitude. (Value between 0-1).
SWIFT_CLASS("_TtC8AudioKit12AKWhiteNoise")
@interface AKWhiteNoise : AKVoice

/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;

/// Amplitude. (Value between 0-1).
@property (nonatomic) double amplitude;

/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;

/// Initialize the noise generator with defaults
- (nonnull instancetype)init;

/// Initialize this noise node
///
/// \param amplitude Amplitude. (Value between 0-1).
- (nonnull instancetype)initWithAmplitude:(double)amplitude OBJC_DESIGNATED_INITIALIZER;

/// Function create an identical new node for use in creating polyphonic instruments
- (AKVoice * _Nonnull)duplicate;

/// Function to start, play, or activate the node, all do the same thing
- (void)start;

/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end

@class AVAudioEngine;


/// Top level AudioKit managing class
SWIFT_CLASS("_TtC8AudioKit8AudioKit")
@interface AudioKit : NSObject

/// Format of AudioKit Nodes
+ (AVAudioFormat * _Nonnull)format;

/// Reference to the AV Audio Engine
+ (AVAudioEngine * _Nonnull)engine;

/// An audio output operation that most applications will need to use last
+ (AKNode * _Nullable)output;
+ (void)setOutput:(AKNode * _Nullable)newValue;

/// Enumerate the list of available input devices.
+ (NSArray<AKDevice *> * _Nullable)availableInputs;

/// Enumerate the list of available output devices.
+ (NSArray<AKDevice *> * _Nullable)availableOutputs;

/// The name of the current preferred input device, if available.
+ (AKDevice * _Nullable)inputDevice;

/// Change the preferred input device, giving it one of the names from the list of available inputs.
+ (BOOL)setInputDevice:(AKDevice * _Nonnull)input error:(NSError * _Nullable * _Null_unspecified)error;

/// Change the preferred output device, giving it one of the names from the list of available output.
+ (BOOL)setOutputDevice:(AKDevice * _Nonnull)output error:(NSError * _Nullable * _Null_unspecified)error;

/// Start up the audio engine
+ (void)start;

/// Stop the audio engine
+ (void)stop;

/// Testing AKNode
+ (AKTester * _Nullable)tester;
+ (void)setTester:(AKTester * _Nullable)value;

/// Test the output of a given node
///
/// \param node AKNode to test
///
/// \param samples Number of samples to generate in the test
+ (void)testOutput:(AKNode * _Nonnull)node samples:(NSInteger)samples;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#pragma clang diagnostic pop
